// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Paxos.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Paxos_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Paxos_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Paxos_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Paxos_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Paxos_2eproto;
namespace protos {
class Accept;
struct AcceptDefaultTypeInternal;
extern AcceptDefaultTypeInternal _Accept_default_instance_;
class Accepted;
struct AcceptedDefaultTypeInternal;
extern AcceptedDefaultTypeInternal _Accepted_default_instance_;
class Commit;
struct CommitDefaultTypeInternal;
extern CommitDefaultTypeInternal _Commit_default_instance_;
class Finish;
struct FinishDefaultTypeInternal;
extern FinishDefaultTypeInternal _Finish_default_instance_;
class Init;
struct InitDefaultTypeInternal;
extern InitDefaultTypeInternal _Init_default_instance_;
class Prepare;
struct PrepareDefaultTypeInternal;
extern PrepareDefaultTypeInternal _Prepare_default_instance_;
class Promise;
struct PromiseDefaultTypeInternal;
extern PromiseDefaultTypeInternal _Promise_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class VotePax;
struct VotePaxDefaultTypeInternal;
extern VotePaxDefaultTypeInternal _VotePax_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class VotePax final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.VotePax) */ {
 public:
  inline VotePax() : VotePax(nullptr) {}
  ~VotePax() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotePax(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotePax(const VotePax& from) : VotePax(nullptr, from) {}
  inline VotePax(VotePax&& from) noexcept
      : VotePax(nullptr, std::move(from)) {}
  inline VotePax& operator=(const VotePax& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotePax& operator=(VotePax&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotePax& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotePax* internal_default_instance() {
    return reinterpret_cast<const VotePax*>(
        &_VotePax_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VotePax& a, VotePax& b) { a.Swap(&b); }
  inline void Swap(VotePax* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotePax* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotePax* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VotePax>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotePax& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotePax& from) { VotePax::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VotePax* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.VotePax"; }

 protected:
  explicit VotePax(::google::protobuf::Arena* arena);
  VotePax(::google::protobuf::Arena* arena, const VotePax& from);
  VotePax(::google::protobuf::Arena* arena, VotePax&& from) noexcept
      : VotePax(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPartyFieldNumber = 2,
    kOriginStateFieldNumber = 3,
    kCurrentStateFieldNumber = 4,
    kClientIDFieldNumber = 1,
    kSessionIDFieldNumber = 6,
    kTimeStampFieldNumber = 5,
    kLeaderIDFieldNumber = 7,
  };
  // string party = 2;
  void clear_party() ;
  const std::string& party() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_party(Arg_&& arg, Args_... args);
  std::string* mutable_party();
  PROTOBUF_NODISCARD std::string* release_party();
  void set_allocated_party(std::string* value);

  private:
  const std::string& _internal_party() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(
      const std::string& value);
  std::string* _internal_mutable_party();

  public:
  // string originState = 3;
  void clear_originstate() ;
  const std::string& originstate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originstate(Arg_&& arg, Args_... args);
  std::string* mutable_originstate();
  PROTOBUF_NODISCARD std::string* release_originstate();
  void set_allocated_originstate(std::string* value);

  private:
  const std::string& _internal_originstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originstate(
      const std::string& value);
  std::string* _internal_mutable_originstate();

  public:
  // string currentState = 4;
  void clear_currentstate() ;
  const std::string& currentstate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currentstate(Arg_&& arg, Args_... args);
  std::string* mutable_currentstate();
  PROTOBUF_NODISCARD std::string* release_currentstate();
  void set_allocated_currentstate(std::string* value);

  private:
  const std::string& _internal_currentstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentstate(
      const std::string& value);
  std::string* _internal_mutable_currentstate();

  public:
  // int32 clientID = 1;
  void clear_clientid() ;
  ::int32_t clientid() const;
  void set_clientid(::int32_t value);

  private:
  ::int32_t _internal_clientid() const;
  void _internal_set_clientid(::int32_t value);

  public:
  // int32 sessionID = 6;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // uint64 timeStamp = 5;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // int32 leaderID = 7;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.VotePax)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr party_;
    ::google::protobuf::internal::ArenaStringPtr originstate_;
    ::google::protobuf::internal::ArenaStringPtr currentstate_;
    ::int32_t clientid_;
    ::int32_t sessionid_;
    ::uint64_t timestamp_;
    ::int32_t leaderid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Prepare final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Prepare) */ {
 public:
  inline Prepare() : Prepare(nullptr) {}
  ~Prepare() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Prepare(
      ::google::protobuf::internal::ConstantInitialized);

  inline Prepare(const Prepare& from) : Prepare(nullptr, from) {}
  inline Prepare(Prepare&& from) noexcept
      : Prepare(nullptr, std::move(from)) {}
  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare& operator=(Prepare&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Prepare& default_instance() {
    return *internal_default_instance();
  }
  static inline const Prepare* internal_default_instance() {
    return reinterpret_cast<const Prepare*>(
        &_Prepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Prepare& a, Prepare& b) { a.Swap(&b); }
  inline void Swap(Prepare* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prepare* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Prepare* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Prepare>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Prepare& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Prepare& from) { Prepare::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Prepare* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Prepare"; }

 protected:
  explicit Prepare(::google::protobuf::Arena* arena);
  Prepare(::google::protobuf::Arena* arena, const Prepare& from);
  Prepare(::google::protobuf::Arena* arena, Prepare&& from) noexcept
      : Prepare(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeStampFieldNumber = 2,
    kRoundNumberFieldNumber = 1,
    kServerIDFieldNumber = 3,
    kSessionIDFieldNumber = 4,
    kLeaderIDFieldNumber = 5,
    kVoterIDFieldNumber = 6,
  };
  // uint64 timeStamp = 2;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // int32 roundNumber = 1;
  void clear_roundnumber() ;
  ::int32_t roundnumber() const;
  void set_roundnumber(::int32_t value);

  private:
  ::int32_t _internal_roundnumber() const;
  void _internal_set_roundnumber(::int32_t value);

  public:
  // int32 serverID = 3;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 sessionID = 4;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 leaderID = 5;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // int32 voterID = 6;
  void clear_voterid() ;
  ::int32_t voterid() const;
  void set_voterid(::int32_t value);

  private:
  ::int32_t _internal_voterid() const;
  void _internal_set_voterid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Prepare)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t timestamp_;
    ::int32_t roundnumber_;
    ::int32_t serverid_;
    ::int32_t sessionid_;
    ::int32_t leaderid_;
    ::int32_t voterid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Init final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Init) */ {
 public:
  inline Init() : Init(nullptr) {}
  ~Init() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Init(
      ::google::protobuf::internal::ConstantInitialized);

  inline Init(const Init& from) : Init(nullptr, from) {}
  inline Init(Init&& from) noexcept
      : Init(nullptr, std::move(from)) {}
  inline Init& operator=(const Init& from) {
    CopyFrom(from);
    return *this;
  }
  inline Init& operator=(Init&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Init& default_instance() {
    return *internal_default_instance();
  }
  static inline const Init* internal_default_instance() {
    return reinterpret_cast<const Init*>(
        &_Init_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Init& a, Init& b) { a.Swap(&b); }
  inline void Swap(Init* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Init* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Init* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Init>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Init& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Init& from) { Init::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Init* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Init"; }

 protected:
  explicit Init(::google::protobuf::Arena* arena);
  Init(::google::protobuf::Arena* arena, const Init& from);
  Init(::google::protobuf::Arena* arena, Init&& from) noexcept
      : Init(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kServerIDFieldNumber = 1,
    kSessionIDFieldNumber = 2,
    kLeaderIDFieldNumber = 3,
    kVoterIDFieldNumber = 4,
  };
  // int32 serverID = 1;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 sessionID = 2;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 leaderID = 3;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // int32 voterID = 4;
  void clear_voterid() ;
  ::int32_t voterid() const;
  void set_voterid(::int32_t value);

  private:
  ::int32_t _internal_voterid() const;
  void _internal_set_voterid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Init)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t serverid_;
    ::int32_t sessionid_;
    ::int32_t leaderid_;
    ::int32_t voterid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Finish final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protos.Finish) */ {
 public:
  inline Finish() : Finish(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Finish(
      ::google::protobuf::internal::ConstantInitialized);

  inline Finish(const Finish& from) : Finish(nullptr, from) {}
  inline Finish(Finish&& from) noexcept
      : Finish(nullptr, std::move(from)) {}
  inline Finish& operator=(const Finish& from) {
    CopyFrom(from);
    return *this;
  }
  inline Finish& operator=(Finish&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Finish& default_instance() {
    return *internal_default_instance();
  }
  static inline const Finish* internal_default_instance() {
    return reinterpret_cast<const Finish*>(
        &_Finish_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Finish& a, Finish& b) { a.Swap(&b); }
  inline void Swap(Finish* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Finish* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Finish* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Finish>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Finish& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Finish& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Finish"; }

 protected:
  explicit Finish(::google::protobuf::Arena* arena);
  Finish(::google::protobuf::Arena* arena, const Finish& from);
  Finish(::google::protobuf::Arena* arena, Finish&& from) noexcept
      : Finish(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protos.Finish)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Session final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Session(
      ::google::protobuf::internal::ConstantInitialized);

  inline Session(const Session& from) : Session(nullptr, from) {}
  inline Session(Session&& from) noexcept
      : Session(nullptr, std::move(from)) {}
  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
        &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Session& a, Session& b) { a.Swap(&b); }
  inline void Swap(Session* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Session>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Session& from) { Session::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Session* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Session"; }

 protected:
  explicit Session(::google::protobuf::Arena* arena);
  Session(::google::protobuf::Arena* arena, const Session& from);
  Session(::google::protobuf::Arena* arena, Session&& from) noexcept
      : Session(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteFieldNumber = 5,
    kSessionIDFieldNumber = 1,
    kServerIDFieldNumber = 2,
    kLastRoundFieldNumber = 3,
    kLastGoodRoundFieldNumber = 4,
    kIsDecidedFieldNumber = 6,
    kLeaderIDFieldNumber = 7,
    kVoterIDFieldNumber = 8,
  };
  // .protos.VotePax vote = 5;
  bool has_vote() const;
  void clear_vote() ;
  const ::protos::VotePax& vote() const;
  PROTOBUF_NODISCARD ::protos::VotePax* release_vote();
  ::protos::VotePax* mutable_vote();
  void set_allocated_vote(::protos::VotePax* value);
  void unsafe_arena_set_allocated_vote(::protos::VotePax* value);
  ::protos::VotePax* unsafe_arena_release_vote();

  private:
  const ::protos::VotePax& _internal_vote() const;
  ::protos::VotePax* _internal_mutable_vote();

  public:
  // int32 sessionID = 1;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 serverID = 2;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 lastRound = 3;
  void clear_lastround() ;
  ::int32_t lastround() const;
  void set_lastround(::int32_t value);

  private:
  ::int32_t _internal_lastround() const;
  void _internal_set_lastround(::int32_t value);

  public:
  // int32 lastGoodRound = 4;
  void clear_lastgoodround() ;
  ::int32_t lastgoodround() const;
  void set_lastgoodround(::int32_t value);

  private:
  ::int32_t _internal_lastgoodround() const;
  void _internal_set_lastgoodround(::int32_t value);

  public:
  // bool isDecided = 6;
  void clear_isdecided() ;
  bool isdecided() const;
  void set_isdecided(bool value);

  private:
  bool _internal_isdecided() const;
  void _internal_set_isdecided(bool value);

  public:
  // int32 leaderID = 7;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // int32 voterID = 8;
  void clear_voterid() ;
  ::int32_t voterid() const;
  void set_voterid(::int32_t value);

  private:
  ::int32_t _internal_voterid() const;
  void _internal_set_voterid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Session)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::protos::VotePax* vote_;
    ::int32_t sessionid_;
    ::int32_t serverid_;
    ::int32_t lastround_;
    ::int32_t lastgoodround_;
    bool isdecided_;
    ::int32_t leaderid_;
    ::int32_t voterid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Promise final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Promise) */ {
 public:
  inline Promise() : Promise(nullptr) {}
  ~Promise() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Promise(
      ::google::protobuf::internal::ConstantInitialized);

  inline Promise(const Promise& from) : Promise(nullptr, from) {}
  inline Promise(Promise&& from) noexcept
      : Promise(nullptr, std::move(from)) {}
  inline Promise& operator=(const Promise& from) {
    CopyFrom(from);
    return *this;
  }
  inline Promise& operator=(Promise&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Promise& default_instance() {
    return *internal_default_instance();
  }
  static inline const Promise* internal_default_instance() {
    return reinterpret_cast<const Promise*>(
        &_Promise_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Promise& a, Promise& b) { a.Swap(&b); }
  inline void Swap(Promise* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Promise* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Promise* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Promise>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Promise& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Promise& from) { Promise::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Promise* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Promise"; }

 protected:
  explicit Promise(::google::protobuf::Arena* arena);
  Promise(::google::protobuf::Arena* arena, const Promise& from);
  Promise(::google::protobuf::Arena* arena, Promise&& from) noexcept
      : Promise(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteFieldNumber = 5,
    kRoundNumberFieldNumber = 1,
    kAckFieldNumber = 2,
    kLastGoodRoundFieldNumber = 3,
    kServerIDFieldNumber = 6,
    kSessionIDFieldNumber = 7,
    kLeaderIDFieldNumber = 8,
  };
  // .protos.VotePax vote = 5;
  bool has_vote() const;
  void clear_vote() ;
  const ::protos::VotePax& vote() const;
  PROTOBUF_NODISCARD ::protos::VotePax* release_vote();
  ::protos::VotePax* mutable_vote();
  void set_allocated_vote(::protos::VotePax* value);
  void unsafe_arena_set_allocated_vote(::protos::VotePax* value);
  ::protos::VotePax* unsafe_arena_release_vote();

  private:
  const ::protos::VotePax& _internal_vote() const;
  ::protos::VotePax* _internal_mutable_vote();

  public:
  // int32 roundNumber = 1;
  void clear_roundnumber() ;
  ::int32_t roundnumber() const;
  void set_roundnumber(::int32_t value);

  private:
  ::int32_t _internal_roundnumber() const;
  void _internal_set_roundnumber(::int32_t value);

  public:
  // bool ack = 2;
  void clear_ack() ;
  bool ack() const;
  void set_ack(bool value);

  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);

  public:
  // int32 lastGoodRound = 3;
  void clear_lastgoodround() ;
  ::int32_t lastgoodround() const;
  void set_lastgoodround(::int32_t value);

  private:
  ::int32_t _internal_lastgoodround() const;
  void _internal_set_lastgoodround(::int32_t value);

  public:
  // int32 serverID = 6;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 sessionID = 7;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 leaderID = 8;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Promise)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::protos::VotePax* vote_;
    ::int32_t roundnumber_;
    bool ack_;
    ::int32_t lastgoodround_;
    ::int32_t serverid_;
    ::int32_t sessionid_;
    ::int32_t leaderid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Commit final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Commit) */ {
 public:
  inline Commit() : Commit(nullptr) {}
  ~Commit() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Commit(
      ::google::protobuf::internal::ConstantInitialized);

  inline Commit(const Commit& from) : Commit(nullptr, from) {}
  inline Commit(Commit&& from) noexcept
      : Commit(nullptr, std::move(from)) {}
  inline Commit& operator=(const Commit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commit& operator=(Commit&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Commit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Commit* internal_default_instance() {
    return reinterpret_cast<const Commit*>(
        &_Commit_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Commit& a, Commit& b) { a.Swap(&b); }
  inline void Swap(Commit* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Commit* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Commit>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Commit& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Commit& from) { Commit::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Commit* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Commit"; }

 protected:
  explicit Commit(::google::protobuf::Arena* arena);
  Commit(::google::protobuf::Arena* arena, const Commit& from);
  Commit(::google::protobuf::Arena* arena, Commit&& from) noexcept
      : Commit(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteFieldNumber = 5,
    kSessionIDFieldNumber = 1,
    kLeaderIDFieldNumber = 7,
  };
  // .protos.VotePax vote = 5;
  bool has_vote() const;
  void clear_vote() ;
  const ::protos::VotePax& vote() const;
  PROTOBUF_NODISCARD ::protos::VotePax* release_vote();
  ::protos::VotePax* mutable_vote();
  void set_allocated_vote(::protos::VotePax* value);
  void unsafe_arena_set_allocated_vote(::protos::VotePax* value);
  ::protos::VotePax* unsafe_arena_release_vote();

  private:
  const ::protos::VotePax& _internal_vote() const;
  ::protos::VotePax* _internal_mutable_vote();

  public:
  // int32 sessionID = 1;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 leaderID = 7;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Commit)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::protos::VotePax* vote_;
    ::int32_t sessionid_;
    ::int32_t leaderid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Accepted final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Accepted) */ {
 public:
  inline Accepted() : Accepted(nullptr) {}
  ~Accepted() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Accepted(
      ::google::protobuf::internal::ConstantInitialized);

  inline Accepted(const Accepted& from) : Accepted(nullptr, from) {}
  inline Accepted(Accepted&& from) noexcept
      : Accepted(nullptr, std::move(from)) {}
  inline Accepted& operator=(const Accepted& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accepted& operator=(Accepted&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Accepted& default_instance() {
    return *internal_default_instance();
  }
  static inline const Accepted* internal_default_instance() {
    return reinterpret_cast<const Accepted*>(
        &_Accepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Accepted& a, Accepted& b) { a.Swap(&b); }
  inline void Swap(Accepted* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accepted* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Accepted* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Accepted>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Accepted& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Accepted& from) { Accepted::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Accepted* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Accepted"; }

 protected:
  explicit Accepted(::google::protobuf::Arena* arena);
  Accepted(::google::protobuf::Arena* arena, const Accepted& from);
  Accepted(::google::protobuf::Arena* arena, Accepted&& from) noexcept
      : Accepted(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteFieldNumber = 4,
    kRoundNumberFieldNumber = 1,
    kAckFieldNumber = 2,
    kServerIDFieldNumber = 5,
    kSessionIDFieldNumber = 6,
    kLeaderIDFieldNumber = 7,
  };
  // .protos.VotePax vote = 4;
  bool has_vote() const;
  void clear_vote() ;
  const ::protos::VotePax& vote() const;
  PROTOBUF_NODISCARD ::protos::VotePax* release_vote();
  ::protos::VotePax* mutable_vote();
  void set_allocated_vote(::protos::VotePax* value);
  void unsafe_arena_set_allocated_vote(::protos::VotePax* value);
  ::protos::VotePax* unsafe_arena_release_vote();

  private:
  const ::protos::VotePax& _internal_vote() const;
  ::protos::VotePax* _internal_mutable_vote();

  public:
  // int32 roundNumber = 1;
  void clear_roundnumber() ;
  ::int32_t roundnumber() const;
  void set_roundnumber(::int32_t value);

  private:
  ::int32_t _internal_roundnumber() const;
  void _internal_set_roundnumber(::int32_t value);

  public:
  // bool ack = 2;
  void clear_ack() ;
  bool ack() const;
  void set_ack(bool value);

  private:
  bool _internal_ack() const;
  void _internal_set_ack(bool value);

  public:
  // int32 serverID = 5;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 sessionID = 6;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 leaderID = 7;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Accepted)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::protos::VotePax* vote_;
    ::int32_t roundnumber_;
    bool ack_;
    ::int32_t serverid_;
    ::int32_t sessionid_;
    ::int32_t leaderid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};
// -------------------------------------------------------------------

class Accept final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.Accept) */ {
 public:
  inline Accept() : Accept(nullptr) {}
  ~Accept() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Accept(
      ::google::protobuf::internal::ConstantInitialized);

  inline Accept(const Accept& from) : Accept(nullptr, from) {}
  inline Accept(Accept&& from) noexcept
      : Accept(nullptr, std::move(from)) {}
  inline Accept& operator=(const Accept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Accept& operator=(Accept&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Accept& default_instance() {
    return *internal_default_instance();
  }
  static inline const Accept* internal_default_instance() {
    return reinterpret_cast<const Accept*>(
        &_Accept_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Accept& a, Accept& b) { a.Swap(&b); }
  inline void Swap(Accept* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Accept* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Accept* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Accept>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Accept& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Accept& from) { Accept::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Accept* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.Accept"; }

 protected:
  explicit Accept(::google::protobuf::Arena* arena);
  Accept(::google::protobuf::Arena* arena, const Accept& from);
  Accept(::google::protobuf::Arena* arena, Accept&& from) noexcept
      : Accept(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVoteFieldNumber = 2,
    kRoundNumberFieldNumber = 1,
    kServerIDFieldNumber = 3,
    kSessionIDFieldNumber = 4,
    kLeaderIDFieldNumber = 5,
  };
  // .protos.VotePax vote = 2;
  bool has_vote() const;
  void clear_vote() ;
  const ::protos::VotePax& vote() const;
  PROTOBUF_NODISCARD ::protos::VotePax* release_vote();
  ::protos::VotePax* mutable_vote();
  void set_allocated_vote(::protos::VotePax* value);
  void unsafe_arena_set_allocated_vote(::protos::VotePax* value);
  ::protos::VotePax* unsafe_arena_release_vote();

  private:
  const ::protos::VotePax& _internal_vote() const;
  ::protos::VotePax* _internal_mutable_vote();

  public:
  // int32 roundNumber = 1;
  void clear_roundnumber() ;
  ::int32_t roundnumber() const;
  void set_roundnumber(::int32_t value);

  private:
  ::int32_t _internal_roundnumber() const;
  void _internal_set_roundnumber(::int32_t value);

  public:
  // int32 serverID = 3;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 sessionID = 4;
  void clear_sessionid() ;
  ::int32_t sessionid() const;
  void set_sessionid(::int32_t value);

  private:
  ::int32_t _internal_sessionid() const;
  void _internal_set_sessionid(::int32_t value);

  public:
  // int32 leaderID = 5;
  void clear_leaderid() ;
  ::int32_t leaderid() const;
  void set_leaderid(::int32_t value);

  private:
  ::int32_t _internal_leaderid() const;
  void _internal_set_leaderid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.Accept)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::protos::VotePax* vote_;
    ::int32_t roundnumber_;
    ::int32_t serverid_;
    ::int32_t sessionid_;
    ::int32_t leaderid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Paxos_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VotePax

// int32 clientID = 1;
inline void VotePax::clear_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_ = 0;
}
inline ::int32_t VotePax::clientid() const {
  // @@protoc_insertion_point(field_get:protos.VotePax.clientID)
  return _internal_clientid();
}
inline void VotePax::set_clientid(::int32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:protos.VotePax.clientID)
}
inline ::int32_t VotePax::_internal_clientid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clientid_;
}
inline void VotePax::_internal_set_clientid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_ = value;
}

// string party = 2;
inline void VotePax::clear_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.ClearToEmpty();
}
inline const std::string& VotePax::party() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotePax.party)
  return _internal_party();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotePax::set_party(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotePax.party)
}
inline std::string* VotePax::mutable_party() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_party();
  // @@protoc_insertion_point(field_mutable:protos.VotePax.party)
  return _s;
}
inline const std::string& VotePax::_internal_party() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.party_.Get();
}
inline void VotePax::_internal_set_party(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(value, GetArena());
}
inline std::string* VotePax::_internal_mutable_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.party_.Mutable( GetArena());
}
inline std::string* VotePax::release_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotePax.party)
  return _impl_.party_.Release();
}
inline void VotePax::set_allocated_party(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.party_.IsDefault()) {
          _impl_.party_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotePax.party)
}

// string originState = 3;
inline void VotePax::clear_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.ClearToEmpty();
}
inline const std::string& VotePax::originstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotePax.originState)
  return _internal_originstate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotePax::set_originstate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotePax.originState)
}
inline std::string* VotePax::mutable_originstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originstate();
  // @@protoc_insertion_point(field_mutable:protos.VotePax.originState)
  return _s;
}
inline const std::string& VotePax::_internal_originstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.originstate_.Get();
}
inline void VotePax::_internal_set_originstate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.Set(value, GetArena());
}
inline std::string* VotePax::_internal_mutable_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.originstate_.Mutable( GetArena());
}
inline std::string* VotePax::release_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotePax.originState)
  return _impl_.originstate_.Release();
}
inline void VotePax::set_allocated_originstate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.originstate_.IsDefault()) {
          _impl_.originstate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotePax.originState)
}

// string currentState = 4;
inline void VotePax::clear_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.ClearToEmpty();
}
inline const std::string& VotePax::currentstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotePax.currentState)
  return _internal_currentstate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotePax::set_currentstate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotePax.currentState)
}
inline std::string* VotePax::mutable_currentstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currentstate();
  // @@protoc_insertion_point(field_mutable:protos.VotePax.currentState)
  return _s;
}
inline const std::string& VotePax::_internal_currentstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currentstate_.Get();
}
inline void VotePax::_internal_set_currentstate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.Set(value, GetArena());
}
inline std::string* VotePax::_internal_mutable_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.currentstate_.Mutable( GetArena());
}
inline std::string* VotePax::release_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotePax.currentState)
  return _impl_.currentstate_.Release();
}
inline void VotePax::set_allocated_currentstate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currentstate_.IsDefault()) {
          _impl_.currentstate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotePax.currentState)
}

// uint64 timeStamp = 5;
inline void VotePax::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t VotePax::timestamp() const {
  // @@protoc_insertion_point(field_get:protos.VotePax.timeStamp)
  return _internal_timestamp();
}
inline void VotePax::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protos.VotePax.timeStamp)
}
inline ::uint64_t VotePax::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void VotePax::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = value;
}

// int32 sessionID = 6;
inline void VotePax::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t VotePax::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.VotePax.sessionID)
  return _internal_sessionid();
}
inline void VotePax::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.VotePax.sessionID)
}
inline ::int32_t VotePax::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void VotePax::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 7;
inline void VotePax::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t VotePax::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.VotePax.leaderID)
  return _internal_leaderid();
}
inline void VotePax::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.VotePax.leaderID)
}
inline ::int32_t VotePax::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void VotePax::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// -------------------------------------------------------------------

// Init

// int32 serverID = 1;
inline void Init::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t Init::serverid() const {
  // @@protoc_insertion_point(field_get:protos.Init.serverID)
  return _internal_serverid();
}
inline void Init::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.Init.serverID)
}
inline ::int32_t Init::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void Init::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// int32 sessionID = 2;
inline void Init::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Init::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Init.sessionID)
  return _internal_sessionid();
}
inline void Init::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Init.sessionID)
}
inline ::int32_t Init::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Init::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 3;
inline void Init::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Init::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Init.leaderID)
  return _internal_leaderid();
}
inline void Init::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Init.leaderID)
}
inline ::int32_t Init::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Init::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// int32 voterID = 4;
inline void Init::clear_voterid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voterid_ = 0;
}
inline ::int32_t Init::voterid() const {
  // @@protoc_insertion_point(field_get:protos.Init.voterID)
  return _internal_voterid();
}
inline void Init::set_voterid(::int32_t value) {
  _internal_set_voterid(value);
  // @@protoc_insertion_point(field_set:protos.Init.voterID)
}
inline ::int32_t Init::_internal_voterid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voterid_;
}
inline void Init::_internal_set_voterid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voterid_ = value;
}

// -------------------------------------------------------------------

// Prepare

// int32 roundNumber = 1;
inline void Prepare::clear_roundnumber() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = 0;
}
inline ::int32_t Prepare::roundnumber() const {
  // @@protoc_insertion_point(field_get:protos.Prepare.roundNumber)
  return _internal_roundnumber();
}
inline void Prepare::set_roundnumber(::int32_t value) {
  _internal_set_roundnumber(value);
  // @@protoc_insertion_point(field_set:protos.Prepare.roundNumber)
}
inline ::int32_t Prepare::_internal_roundnumber() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roundnumber_;
}
inline void Prepare::_internal_set_roundnumber(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = value;
}

// uint64 timeStamp = 2;
inline void Prepare::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t Prepare::timestamp() const {
  // @@protoc_insertion_point(field_get:protos.Prepare.timeStamp)
  return _internal_timestamp();
}
inline void Prepare::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protos.Prepare.timeStamp)
}
inline ::uint64_t Prepare::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void Prepare::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = value;
}

// int32 serverID = 3;
inline void Prepare::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t Prepare::serverid() const {
  // @@protoc_insertion_point(field_get:protos.Prepare.serverID)
  return _internal_serverid();
}
inline void Prepare::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.Prepare.serverID)
}
inline ::int32_t Prepare::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void Prepare::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// int32 sessionID = 4;
inline void Prepare::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Prepare::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Prepare.sessionID)
  return _internal_sessionid();
}
inline void Prepare::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Prepare.sessionID)
}
inline ::int32_t Prepare::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Prepare::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 5;
inline void Prepare::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Prepare::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Prepare.leaderID)
  return _internal_leaderid();
}
inline void Prepare::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Prepare.leaderID)
}
inline ::int32_t Prepare::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Prepare::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// int32 voterID = 6;
inline void Prepare::clear_voterid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voterid_ = 0;
}
inline ::int32_t Prepare::voterid() const {
  // @@protoc_insertion_point(field_get:protos.Prepare.voterID)
  return _internal_voterid();
}
inline void Prepare::set_voterid(::int32_t value) {
  _internal_set_voterid(value);
  // @@protoc_insertion_point(field_set:protos.Prepare.voterID)
}
inline ::int32_t Prepare::_internal_voterid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voterid_;
}
inline void Prepare::_internal_set_voterid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voterid_ = value;
}

// -------------------------------------------------------------------

// Promise

// int32 roundNumber = 1;
inline void Promise::clear_roundnumber() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = 0;
}
inline ::int32_t Promise::roundnumber() const {
  // @@protoc_insertion_point(field_get:protos.Promise.roundNumber)
  return _internal_roundnumber();
}
inline void Promise::set_roundnumber(::int32_t value) {
  _internal_set_roundnumber(value);
  // @@protoc_insertion_point(field_set:protos.Promise.roundNumber)
}
inline ::int32_t Promise::_internal_roundnumber() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roundnumber_;
}
inline void Promise::_internal_set_roundnumber(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = value;
}

// bool ack = 2;
inline void Promise::clear_ack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_ = false;
}
inline bool Promise::ack() const {
  // @@protoc_insertion_point(field_get:protos.Promise.ack)
  return _internal_ack();
}
inline void Promise::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:protos.Promise.ack)
}
inline bool Promise::_internal_ack() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ack_;
}
inline void Promise::_internal_set_ack(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_ = value;
}

// int32 lastGoodRound = 3;
inline void Promise::clear_lastgoodround() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastgoodround_ = 0;
}
inline ::int32_t Promise::lastgoodround() const {
  // @@protoc_insertion_point(field_get:protos.Promise.lastGoodRound)
  return _internal_lastgoodround();
}
inline void Promise::set_lastgoodround(::int32_t value) {
  _internal_set_lastgoodround(value);
  // @@protoc_insertion_point(field_set:protos.Promise.lastGoodRound)
}
inline ::int32_t Promise::_internal_lastgoodround() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastgoodround_;
}
inline void Promise::_internal_set_lastgoodround(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastgoodround_ = value;
}

// .protos.VotePax vote = 5;
inline bool Promise::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline void Promise::clear_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protos::VotePax& Promise::_internal_vote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protos::VotePax* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::VotePax&>(::protos::_VotePax_default_instance_);
}
inline const ::protos::VotePax& Promise::vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.Promise.vote)
  return _internal_vote();
}
inline void Promise::unsafe_arena_set_allocated_vote(::protos::VotePax* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Promise.vote)
}
inline ::protos::VotePax* Promise::release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* released = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protos::VotePax* Promise::unsafe_arena_release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.Promise.vote)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::protos::VotePax* Promise::_internal_mutable_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protos::VotePax>(GetArena());
    _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(p);
  }
  return _impl_.vote_;
}
inline ::protos::VotePax* Promise::mutable_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protos::VotePax* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:protos.Promise.vote)
  return _msg;
}
inline void Promise::set_allocated_vote(::protos::VotePax* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.vote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  // @@protoc_insertion_point(field_set_allocated:protos.Promise.vote)
}

// int32 serverID = 6;
inline void Promise::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t Promise::serverid() const {
  // @@protoc_insertion_point(field_get:protos.Promise.serverID)
  return _internal_serverid();
}
inline void Promise::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.Promise.serverID)
}
inline ::int32_t Promise::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void Promise::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// int32 sessionID = 7;
inline void Promise::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Promise::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Promise.sessionID)
  return _internal_sessionid();
}
inline void Promise::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Promise.sessionID)
}
inline ::int32_t Promise::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Promise::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 8;
inline void Promise::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Promise::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Promise.leaderID)
  return _internal_leaderid();
}
inline void Promise::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Promise.leaderID)
}
inline ::int32_t Promise::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Promise::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// -------------------------------------------------------------------

// Accept

// int32 roundNumber = 1;
inline void Accept::clear_roundnumber() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = 0;
}
inline ::int32_t Accept::roundnumber() const {
  // @@protoc_insertion_point(field_get:protos.Accept.roundNumber)
  return _internal_roundnumber();
}
inline void Accept::set_roundnumber(::int32_t value) {
  _internal_set_roundnumber(value);
  // @@protoc_insertion_point(field_set:protos.Accept.roundNumber)
}
inline ::int32_t Accept::_internal_roundnumber() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roundnumber_;
}
inline void Accept::_internal_set_roundnumber(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = value;
}

// .protos.VotePax vote = 2;
inline bool Accept::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline void Accept::clear_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protos::VotePax& Accept::_internal_vote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protos::VotePax* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::VotePax&>(::protos::_VotePax_default_instance_);
}
inline const ::protos::VotePax& Accept::vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.Accept.vote)
  return _internal_vote();
}
inline void Accept::unsafe_arena_set_allocated_vote(::protos::VotePax* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Accept.vote)
}
inline ::protos::VotePax* Accept::release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* released = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protos::VotePax* Accept::unsafe_arena_release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.Accept.vote)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::protos::VotePax* Accept::_internal_mutable_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protos::VotePax>(GetArena());
    _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(p);
  }
  return _impl_.vote_;
}
inline ::protos::VotePax* Accept::mutable_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protos::VotePax* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:protos.Accept.vote)
  return _msg;
}
inline void Accept::set_allocated_vote(::protos::VotePax* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.vote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  // @@protoc_insertion_point(field_set_allocated:protos.Accept.vote)
}

// int32 serverID = 3;
inline void Accept::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t Accept::serverid() const {
  // @@protoc_insertion_point(field_get:protos.Accept.serverID)
  return _internal_serverid();
}
inline void Accept::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.Accept.serverID)
}
inline ::int32_t Accept::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void Accept::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// int32 sessionID = 4;
inline void Accept::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Accept::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Accept.sessionID)
  return _internal_sessionid();
}
inline void Accept::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Accept.sessionID)
}
inline ::int32_t Accept::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Accept::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 5;
inline void Accept::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Accept::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Accept.leaderID)
  return _internal_leaderid();
}
inline void Accept::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Accept.leaderID)
}
inline ::int32_t Accept::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Accept::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// -------------------------------------------------------------------

// Accepted

// int32 roundNumber = 1;
inline void Accepted::clear_roundnumber() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = 0;
}
inline ::int32_t Accepted::roundnumber() const {
  // @@protoc_insertion_point(field_get:protos.Accepted.roundNumber)
  return _internal_roundnumber();
}
inline void Accepted::set_roundnumber(::int32_t value) {
  _internal_set_roundnumber(value);
  // @@protoc_insertion_point(field_set:protos.Accepted.roundNumber)
}
inline ::int32_t Accepted::_internal_roundnumber() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.roundnumber_;
}
inline void Accepted::_internal_set_roundnumber(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.roundnumber_ = value;
}

// bool ack = 2;
inline void Accepted::clear_ack() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_ = false;
}
inline bool Accepted::ack() const {
  // @@protoc_insertion_point(field_get:protos.Accepted.ack)
  return _internal_ack();
}
inline void Accepted::set_ack(bool value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:protos.Accepted.ack)
}
inline bool Accepted::_internal_ack() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ack_;
}
inline void Accepted::_internal_set_ack(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_ = value;
}

// .protos.VotePax vote = 4;
inline bool Accepted::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline void Accepted::clear_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protos::VotePax& Accepted::_internal_vote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protos::VotePax* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::VotePax&>(::protos::_VotePax_default_instance_);
}
inline const ::protos::VotePax& Accepted::vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.Accepted.vote)
  return _internal_vote();
}
inline void Accepted::unsafe_arena_set_allocated_vote(::protos::VotePax* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Accepted.vote)
}
inline ::protos::VotePax* Accepted::release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* released = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protos::VotePax* Accepted::unsafe_arena_release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.Accepted.vote)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::protos::VotePax* Accepted::_internal_mutable_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protos::VotePax>(GetArena());
    _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(p);
  }
  return _impl_.vote_;
}
inline ::protos::VotePax* Accepted::mutable_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protos::VotePax* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:protos.Accepted.vote)
  return _msg;
}
inline void Accepted::set_allocated_vote(::protos::VotePax* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.vote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  // @@protoc_insertion_point(field_set_allocated:protos.Accepted.vote)
}

// int32 serverID = 5;
inline void Accepted::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t Accepted::serverid() const {
  // @@protoc_insertion_point(field_get:protos.Accepted.serverID)
  return _internal_serverid();
}
inline void Accepted::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.Accepted.serverID)
}
inline ::int32_t Accepted::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void Accepted::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// int32 sessionID = 6;
inline void Accepted::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Accepted::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Accepted.sessionID)
  return _internal_sessionid();
}
inline void Accepted::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Accepted.sessionID)
}
inline ::int32_t Accepted::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Accepted::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 7;
inline void Accepted::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Accepted::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Accepted.leaderID)
  return _internal_leaderid();
}
inline void Accepted::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Accepted.leaderID)
}
inline ::int32_t Accepted::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Accepted::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// -------------------------------------------------------------------

// Session

// int32 sessionID = 1;
inline void Session::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Session::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Session.sessionID)
  return _internal_sessionid();
}
inline void Session::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Session.sessionID)
}
inline ::int32_t Session::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Session::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 serverID = 2;
inline void Session::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t Session::serverid() const {
  // @@protoc_insertion_point(field_get:protos.Session.serverID)
  return _internal_serverid();
}
inline void Session::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.Session.serverID)
}
inline ::int32_t Session::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void Session::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// int32 lastRound = 3;
inline void Session::clear_lastround() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastround_ = 0;
}
inline ::int32_t Session::lastround() const {
  // @@protoc_insertion_point(field_get:protos.Session.lastRound)
  return _internal_lastround();
}
inline void Session::set_lastround(::int32_t value) {
  _internal_set_lastround(value);
  // @@protoc_insertion_point(field_set:protos.Session.lastRound)
}
inline ::int32_t Session::_internal_lastround() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastround_;
}
inline void Session::_internal_set_lastround(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastround_ = value;
}

// int32 lastGoodRound = 4;
inline void Session::clear_lastgoodround() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastgoodround_ = 0;
}
inline ::int32_t Session::lastgoodround() const {
  // @@protoc_insertion_point(field_get:protos.Session.lastGoodRound)
  return _internal_lastgoodround();
}
inline void Session::set_lastgoodround(::int32_t value) {
  _internal_set_lastgoodround(value);
  // @@protoc_insertion_point(field_set:protos.Session.lastGoodRound)
}
inline ::int32_t Session::_internal_lastgoodround() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lastgoodround_;
}
inline void Session::_internal_set_lastgoodround(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lastgoodround_ = value;
}

// .protos.VotePax vote = 5;
inline bool Session::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline void Session::clear_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protos::VotePax& Session::_internal_vote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protos::VotePax* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::VotePax&>(::protos::_VotePax_default_instance_);
}
inline const ::protos::VotePax& Session::vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.Session.vote)
  return _internal_vote();
}
inline void Session::unsafe_arena_set_allocated_vote(::protos::VotePax* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Session.vote)
}
inline ::protos::VotePax* Session::release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* released = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protos::VotePax* Session::unsafe_arena_release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.Session.vote)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::protos::VotePax* Session::_internal_mutable_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protos::VotePax>(GetArena());
    _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(p);
  }
  return _impl_.vote_;
}
inline ::protos::VotePax* Session::mutable_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protos::VotePax* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:protos.Session.vote)
  return _msg;
}
inline void Session::set_allocated_vote(::protos::VotePax* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.vote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  // @@protoc_insertion_point(field_set_allocated:protos.Session.vote)
}

// bool isDecided = 6;
inline void Session::clear_isdecided() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isdecided_ = false;
}
inline bool Session::isdecided() const {
  // @@protoc_insertion_point(field_get:protos.Session.isDecided)
  return _internal_isdecided();
}
inline void Session::set_isdecided(bool value) {
  _internal_set_isdecided(value);
  // @@protoc_insertion_point(field_set:protos.Session.isDecided)
}
inline bool Session::_internal_isdecided() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.isdecided_;
}
inline void Session::_internal_set_isdecided(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.isdecided_ = value;
}

// int32 leaderID = 7;
inline void Session::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Session::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Session.leaderID)
  return _internal_leaderid();
}
inline void Session::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Session.leaderID)
}
inline ::int32_t Session::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Session::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// int32 voterID = 8;
inline void Session::clear_voterid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voterid_ = 0;
}
inline ::int32_t Session::voterid() const {
  // @@protoc_insertion_point(field_get:protos.Session.voterID)
  return _internal_voterid();
}
inline void Session::set_voterid(::int32_t value) {
  _internal_set_voterid(value);
  // @@protoc_insertion_point(field_set:protos.Session.voterID)
}
inline ::int32_t Session::_internal_voterid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.voterid_;
}
inline void Session::_internal_set_voterid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.voterid_ = value;
}

// -------------------------------------------------------------------

// Commit

// int32 sessionID = 1;
inline void Commit::clear_sessionid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = 0;
}
inline ::int32_t Commit::sessionid() const {
  // @@protoc_insertion_point(field_get:protos.Commit.sessionID)
  return _internal_sessionid();
}
inline void Commit::set_sessionid(::int32_t value) {
  _internal_set_sessionid(value);
  // @@protoc_insertion_point(field_set:protos.Commit.sessionID)
}
inline ::int32_t Commit::_internal_sessionid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sessionid_;
}
inline void Commit::_internal_set_sessionid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sessionid_ = value;
}

// int32 leaderID = 7;
inline void Commit::clear_leaderid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = 0;
}
inline ::int32_t Commit::leaderid() const {
  // @@protoc_insertion_point(field_get:protos.Commit.leaderID)
  return _internal_leaderid();
}
inline void Commit::set_leaderid(::int32_t value) {
  _internal_set_leaderid(value);
  // @@protoc_insertion_point(field_set:protos.Commit.leaderID)
}
inline ::int32_t Commit::_internal_leaderid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.leaderid_;
}
inline void Commit::_internal_set_leaderid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.leaderid_ = value;
}

// .protos.VotePax vote = 5;
inline bool Commit::has_vote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vote_ != nullptr);
  return value;
}
inline void Commit::clear_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::protos::VotePax& Commit::_internal_vote() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::protos::VotePax* p = _impl_.vote_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::VotePax&>(::protos::_VotePax_default_instance_);
}
inline const ::protos::VotePax& Commit::vote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.Commit.vote)
  return _internal_vote();
}
inline void Commit::unsafe_arena_set_allocated_vote(::protos::VotePax* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vote_);
  }
  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.Commit.vote)
}
inline ::protos::VotePax* Commit::release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* released = _impl_.vote_;
  _impl_.vote_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::protos::VotePax* Commit::unsafe_arena_release_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.Commit.vote)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::protos::VotePax* temp = _impl_.vote_;
  _impl_.vote_ = nullptr;
  return temp;
}
inline ::protos::VotePax* Commit::_internal_mutable_vote() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::protos::VotePax>(GetArena());
    _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(p);
  }
  return _impl_.vote_;
}
inline ::protos::VotePax* Commit::mutable_vote() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::protos::VotePax* _msg = _internal_mutable_vote();
  // @@protoc_insertion_point(field_mutable:protos.Commit.vote)
  return _msg;
}
inline void Commit::set_allocated_vote(::protos::VotePax* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.vote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.vote_ = reinterpret_cast<::protos::VotePax*>(value);
  // @@protoc_insertion_point(field_set_allocated:protos.Commit.vote)
}

// -------------------------------------------------------------------

// Finish

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Paxos_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Vote.proto

#include "Vote.pb.h"
#include "Vote.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace protos {

static const char* Greeter_method_names[] = {
  "/protos.Greeter/ReceiveVote",
  "/protos.Greeter/ReceiveStartElections",
  "/protos.Greeter/ReceiveEndElections",
  "/protos.Greeter/ReceiveStatus",
  "/protos.Greeter/ReciveVotesCount",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel, options));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ReceiveVote_(Greeter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveStartElections_(Greeter_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveEndElections_(Greeter_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReceiveStatus_(Greeter_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReciveVotesCount_(Greeter_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Greeter::Stub::ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::protos::VoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protos::VoteRequest, ::protos::VoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReceiveVote_, context, request, response);
}

void Greeter::Stub::async::ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protos::VoteRequest, ::protos::VoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveVote_, context, request, response, std::move(f));
}

void Greeter::Stub::async::ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::VoteReply>* Greeter::Stub::PrepareAsyncReceiveVoteRaw(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protos::VoteReply, ::protos::VoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReceiveVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protos::VoteReply>* Greeter::Stub::AsyncReceiveVoteRaw(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReceiveVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::protos::StartElectionsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protos::StartElectionsRequest, ::protos::StartElectionsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReceiveStartElections_, context, request, response);
}

void Greeter::Stub::async::ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protos::StartElectionsRequest, ::protos::StartElectionsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveStartElections_, context, request, response, std::move(f));
}

void Greeter::Stub::async::ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveStartElections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>* Greeter::Stub::PrepareAsyncReceiveStartElectionsRaw(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protos::StartElectionsReply, ::protos::StartElectionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReceiveStartElections_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>* Greeter::Stub::AsyncReceiveStartElectionsRaw(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReceiveStartElectionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::protos::EndElectionsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protos::EndElectionsRequest, ::protos::EndElectionsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReceiveEndElections_, context, request, response);
}

void Greeter::Stub::async::ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protos::EndElectionsRequest, ::protos::EndElectionsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveEndElections_, context, request, response, std::move(f));
}

void Greeter::Stub::async::ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveEndElections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>* Greeter::Stub::PrepareAsyncReceiveEndElectionsRaw(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protos::EndElectionsReply, ::protos::EndElectionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReceiveEndElections_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>* Greeter::Stub::AsyncReceiveEndElectionsRaw(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReceiveEndElectionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::protos::VotesCountForPartyReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReceiveStatus_, context, request, response);
}

void Greeter::Stub::async::ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::async::ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReceiveStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>* Greeter::Stub::PrepareAsyncReceiveStatusRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::protos::VotesCountForPartyReply, ::protos::VotesCountForPartyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReceiveStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>* Greeter::Stub::AsyncReceiveStatusRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReceiveStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::protos::VotesCountForPartyReply>* Greeter::Stub::ReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::protos::VotesCountForPartyReply>::Create(channel_.get(), rpcmethod_ReciveVotesCount_, context, request);
}

void Greeter::Stub::async::ReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::grpc::ClientReadReactor< ::protos::VotesCountForPartyReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::protos::VotesCountForPartyReply>::Create(stub_->channel_.get(), stub_->rpcmethod_ReciveVotesCount_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>* Greeter::Stub::AsyncReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::protos::VotesCountForPartyReply>::Create(channel_.get(), cq, rpcmethod_ReciveVotesCount_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>* Greeter::Stub::PrepareAsyncReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::protos::VotesCountForPartyReply>::Create(channel_.get(), cq, rpcmethod_ReciveVotesCount_, context, request, false, nullptr);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::protos::VoteRequest, ::protos::VoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::VoteRequest* req,
             ::protos::VoteReply* resp) {
               return service->ReceiveVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::protos::StartElectionsRequest, ::protos::StartElectionsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::StartElectionsRequest* req,
             ::protos::StartElectionsReply* resp) {
               return service->ReceiveStartElections(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::protos::EndElectionsRequest, ::protos::EndElectionsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::EndElectionsRequest* req,
             ::protos::EndElectionsReply* resp) {
               return service->ReceiveEndElections(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::VotesCountForPartyRequest* req,
             ::protos::VotesCountForPartyReply* resp) {
               return service->ReceiveStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Greeter::Service, ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::protos::VotesCountForPartyRequest* req,
             ::grpc::ServerWriter<::protos::VotesCountForPartyReply>* writer) {
               return service->ReciveVotesCount(ctx, req, writer);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::ReceiveVote(::grpc::ServerContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ReceiveStartElections(::grpc::ServerContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ReceiveEndElections(::grpc::ServerContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ReceiveStatus(::grpc::ServerContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ReciveVotesCount(::grpc::ServerContext* context, const ::protos::VotesCountForPartyRequest* request, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace protos


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Paxos.proto
#ifndef GRPC_Paxos_2eproto__INCLUDED
#define GRPC_Paxos_2eproto__INCLUDED

#include "Paxos.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace protos {

class PaxosGreeter final {
 public:
  static constexpr char const* service_full_name() {
    return "protos.PaxosGreeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status UponReceivingInit(::grpc::ClientContext* context, const ::protos::Init& request, ::protos::Init* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Init>> AsyncUponReceivingInit(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Init>>(AsyncUponReceivingInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Init>> PrepareAsyncUponReceivingInit(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Init>>(PrepareAsyncUponReceivingInitRaw(context, request, cq));
    }
    virtual ::grpc::Status UponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare& request, ::protos::Promise* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Promise>> AsyncUponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Promise>>(AsyncUponReceivingPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Promise>> PrepareAsyncUponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Promise>>(PrepareAsyncUponReceivingPrepareRaw(context, request, cq));
    }
    virtual ::grpc::Status UponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept& request, ::protos::Accepted* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Accepted>> AsyncUponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Accepted>>(AsyncUponReceivingAcceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Accepted>> PrepareAsyncUponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Accepted>>(PrepareAsyncUponReceivingAcceptRaw(context, request, cq));
    }
    virtual ::grpc::Status UponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit& request, ::protos::Finish* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Finish>> AsyncUponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Finish>>(AsyncUponReceivingCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Finish>> PrepareAsyncUponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::Finish>>(PrepareAsyncUponReceivingCommitRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UponReceivingInit(::grpc::ClientContext* context, const ::protos::Init* request, ::protos::Init* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UponReceivingInit(::grpc::ClientContext* context, const ::protos::Init* request, ::protos::Init* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare* request, ::protos::Promise* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare* request, ::protos::Promise* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept* request, ::protos::Accepted* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept* request, ::protos::Accepted* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit* request, ::protos::Finish* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit* request, ::protos::Finish* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Init>* AsyncUponReceivingInitRaw(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Init>* PrepareAsyncUponReceivingInitRaw(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Promise>* AsyncUponReceivingPrepareRaw(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Promise>* PrepareAsyncUponReceivingPrepareRaw(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Accepted>* AsyncUponReceivingAcceptRaw(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Accepted>* PrepareAsyncUponReceivingAcceptRaw(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Finish>* AsyncUponReceivingCommitRaw(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::Finish>* PrepareAsyncUponReceivingCommitRaw(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UponReceivingInit(::grpc::ClientContext* context, const ::protos::Init& request, ::protos::Init* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Init>> AsyncUponReceivingInit(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Init>>(AsyncUponReceivingInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Init>> PrepareAsyncUponReceivingInit(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Init>>(PrepareAsyncUponReceivingInitRaw(context, request, cq));
    }
    ::grpc::Status UponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare& request, ::protos::Promise* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Promise>> AsyncUponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Promise>>(AsyncUponReceivingPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Promise>> PrepareAsyncUponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Promise>>(PrepareAsyncUponReceivingPrepareRaw(context, request, cq));
    }
    ::grpc::Status UponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept& request, ::protos::Accepted* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Accepted>> AsyncUponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Accepted>>(AsyncUponReceivingAcceptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Accepted>> PrepareAsyncUponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Accepted>>(PrepareAsyncUponReceivingAcceptRaw(context, request, cq));
    }
    ::grpc::Status UponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit& request, ::protos::Finish* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Finish>> AsyncUponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Finish>>(AsyncUponReceivingCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Finish>> PrepareAsyncUponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::Finish>>(PrepareAsyncUponReceivingCommitRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UponReceivingInit(::grpc::ClientContext* context, const ::protos::Init* request, ::protos::Init* response, std::function<void(::grpc::Status)>) override;
      void UponReceivingInit(::grpc::ClientContext* context, const ::protos::Init* request, ::protos::Init* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare* request, ::protos::Promise* response, std::function<void(::grpc::Status)>) override;
      void UponReceivingPrepare(::grpc::ClientContext* context, const ::protos::Prepare* request, ::protos::Promise* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept* request, ::protos::Accepted* response, std::function<void(::grpc::Status)>) override;
      void UponReceivingAccept(::grpc::ClientContext* context, const ::protos::Accept* request, ::protos::Accepted* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit* request, ::protos::Finish* response, std::function<void(::grpc::Status)>) override;
      void UponReceivingCommit(::grpc::ClientContext* context, const ::protos::Commit* request, ::protos::Finish* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protos::Init>* AsyncUponReceivingInitRaw(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Init>* PrepareAsyncUponReceivingInitRaw(::grpc::ClientContext* context, const ::protos::Init& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Promise>* AsyncUponReceivingPrepareRaw(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Promise>* PrepareAsyncUponReceivingPrepareRaw(::grpc::ClientContext* context, const ::protos::Prepare& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Accepted>* AsyncUponReceivingAcceptRaw(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Accepted>* PrepareAsyncUponReceivingAcceptRaw(::grpc::ClientContext* context, const ::protos::Accept& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Finish>* AsyncUponReceivingCommitRaw(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::Finish>* PrepareAsyncUponReceivingCommitRaw(::grpc::ClientContext* context, const ::protos::Commit& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UponReceivingInit_;
    const ::grpc::internal::RpcMethod rpcmethod_UponReceivingPrepare_;
    const ::grpc::internal::RpcMethod rpcmethod_UponReceivingAccept_;
    const ::grpc::internal::RpcMethod rpcmethod_UponReceivingCommit_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UponReceivingInit(::grpc::ServerContext* context, const ::protos::Init* request, ::protos::Init* response);
    virtual ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* context, const ::protos::Prepare* request, ::protos::Promise* response);
    virtual ::grpc::Status UponReceivingAccept(::grpc::ServerContext* context, const ::protos::Accept* request, ::protos::Accepted* response);
    virtual ::grpc::Status UponReceivingCommit(::grpc::ServerContext* context, const ::protos::Commit* request, ::protos::Finish* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UponReceivingInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UponReceivingInit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UponReceivingInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingInit(::grpc::ServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingInit(::grpc::ServerContext* context, ::protos::Init* request, ::grpc::ServerAsyncResponseWriter< ::protos::Init>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UponReceivingPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UponReceivingPrepare() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UponReceivingPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingPrepare(::grpc::ServerContext* context, ::protos::Prepare* request, ::grpc::ServerAsyncResponseWriter< ::protos::Promise>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UponReceivingAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UponReceivingAccept() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UponReceivingAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingAccept(::grpc::ServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingAccept(::grpc::ServerContext* context, ::protos::Accept* request, ::grpc::ServerAsyncResponseWriter< ::protos::Accepted>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UponReceivingCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UponReceivingCommit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UponReceivingCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingCommit(::grpc::ServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingCommit(::grpc::ServerContext* context, ::protos::Commit* request, ::grpc::ServerAsyncResponseWriter< ::protos::Finish>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UponReceivingInit<WithAsyncMethod_UponReceivingPrepare<WithAsyncMethod_UponReceivingAccept<WithAsyncMethod_UponReceivingCommit<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UponReceivingInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UponReceivingInit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::Init, ::protos::Init>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::Init* request, ::protos::Init* response) { return this->UponReceivingInit(context, request, response); }));}
    void SetMessageAllocatorFor_UponReceivingInit(
        ::grpc::MessageAllocator< ::protos::Init, ::protos::Init>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::Init, ::protos::Init>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UponReceivingInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingInit(::grpc::ServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingInit(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UponReceivingPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UponReceivingPrepare() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::Prepare, ::protos::Promise>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::Prepare* request, ::protos::Promise* response) { return this->UponReceivingPrepare(context, request, response); }));}
    void SetMessageAllocatorFor_UponReceivingPrepare(
        ::grpc::MessageAllocator< ::protos::Prepare, ::protos::Promise>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::Prepare, ::protos::Promise>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UponReceivingPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingPrepare(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UponReceivingAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UponReceivingAccept() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::Accept, ::protos::Accepted>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::Accept* request, ::protos::Accepted* response) { return this->UponReceivingAccept(context, request, response); }));}
    void SetMessageAllocatorFor_UponReceivingAccept(
        ::grpc::MessageAllocator< ::protos::Accept, ::protos::Accepted>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::Accept, ::protos::Accepted>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UponReceivingAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingAccept(::grpc::ServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingAccept(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UponReceivingCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UponReceivingCommit() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::Commit, ::protos::Finish>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::Commit* request, ::protos::Finish* response) { return this->UponReceivingCommit(context, request, response); }));}
    void SetMessageAllocatorFor_UponReceivingCommit(
        ::grpc::MessageAllocator< ::protos::Commit, ::protos::Finish>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::Commit, ::protos::Finish>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UponReceivingCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingCommit(::grpc::ServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingCommit(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UponReceivingInit<WithCallbackMethod_UponReceivingPrepare<WithCallbackMethod_UponReceivingAccept<WithCallbackMethod_UponReceivingCommit<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UponReceivingInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UponReceivingInit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UponReceivingInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingInit(::grpc::ServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UponReceivingPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UponReceivingPrepare() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UponReceivingPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UponReceivingAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UponReceivingAccept() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UponReceivingAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingAccept(::grpc::ServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UponReceivingCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UponReceivingCommit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UponReceivingCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingCommit(::grpc::ServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UponReceivingInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UponReceivingInit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UponReceivingInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingInit(::grpc::ServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UponReceivingPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UponReceivingPrepare() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UponReceivingPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingPrepare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UponReceivingAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UponReceivingAccept() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UponReceivingAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingAccept(::grpc::ServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingAccept(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UponReceivingCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UponReceivingCommit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UponReceivingCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingCommit(::grpc::ServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUponReceivingCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UponReceivingInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UponReceivingInit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UponReceivingInit(context, request, response); }));
    }
    ~WithRawCallbackMethod_UponReceivingInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingInit(::grpc::ServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingInit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UponReceivingPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UponReceivingPrepare() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UponReceivingPrepare(context, request, response); }));
    }
    ~WithRawCallbackMethod_UponReceivingPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingPrepare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UponReceivingAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UponReceivingAccept() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UponReceivingAccept(context, request, response); }));
    }
    ~WithRawCallbackMethod_UponReceivingAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingAccept(::grpc::ServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingAccept(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UponReceivingCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UponReceivingCommit() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UponReceivingCommit(context, request, response); }));
    }
    ~WithRawCallbackMethod_UponReceivingCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UponReceivingCommit(::grpc::ServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UponReceivingCommit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UponReceivingInit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UponReceivingInit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::Init, ::protos::Init>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::Init, ::protos::Init>* streamer) {
                       return this->StreamedUponReceivingInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UponReceivingInit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UponReceivingInit(::grpc::ServerContext* /*context*/, const ::protos::Init* /*request*/, ::protos::Init* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUponReceivingInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Init,::protos::Init>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UponReceivingPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UponReceivingPrepare() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::Prepare, ::protos::Promise>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::Prepare, ::protos::Promise>* streamer) {
                       return this->StreamedUponReceivingPrepare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UponReceivingPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UponReceivingPrepare(::grpc::ServerContext* /*context*/, const ::protos::Prepare* /*request*/, ::protos::Promise* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUponReceivingPrepare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Prepare,::protos::Promise>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UponReceivingAccept : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UponReceivingAccept() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::Accept, ::protos::Accepted>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::Accept, ::protos::Accepted>* streamer) {
                       return this->StreamedUponReceivingAccept(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UponReceivingAccept() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UponReceivingAccept(::grpc::ServerContext* /*context*/, const ::protos::Accept* /*request*/, ::protos::Accepted* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUponReceivingAccept(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Accept,::protos::Accepted>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UponReceivingCommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UponReceivingCommit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::Commit, ::protos::Finish>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::Commit, ::protos::Finish>* streamer) {
                       return this->StreamedUponReceivingCommit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UponReceivingCommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UponReceivingCommit(::grpc::ServerContext* /*context*/, const ::protos::Commit* /*request*/, ::protos::Finish* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUponReceivingCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::Commit,::protos::Finish>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UponReceivingInit<WithStreamedUnaryMethod_UponReceivingPrepare<WithStreamedUnaryMethod_UponReceivingAccept<WithStreamedUnaryMethod_UponReceivingCommit<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UponReceivingInit<WithStreamedUnaryMethod_UponReceivingPrepare<WithStreamedUnaryMethod_UponReceivingAccept<WithStreamedUnaryMethod_UponReceivingCommit<Service > > > > StreamedService;
};

}  // namespace protos


#endif  // GRPC_Paxos_2eproto__INCLUDED

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Vote.proto
#ifndef GRPC_Vote_2eproto__INCLUDED
#define GRPC_Vote_2eproto__INCLUDED

#include "Vote.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace protos {

class Greeter final {
 public:
  static constexpr char const* service_full_name() {
    return "protos.Greeter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::protos::VoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VoteReply>> AsyncReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VoteReply>>(AsyncReceiveVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VoteReply>> PrepareAsyncReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VoteReply>>(PrepareAsyncReceiveVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::protos::StartElectionsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::StartElectionsReply>> AsyncReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::StartElectionsReply>>(AsyncReceiveStartElectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::StartElectionsReply>> PrepareAsyncReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::StartElectionsReply>>(PrepareAsyncReceiveStartElectionsRaw(context, request, cq));
    }
    virtual ::grpc::Status ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::protos::EndElectionsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::EndElectionsReply>> AsyncReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::EndElectionsReply>>(AsyncReceiveEndElectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::EndElectionsReply>> PrepareAsyncReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::EndElectionsReply>>(PrepareAsyncReceiveEndElectionsRaw(context, request, cq));
    }
    virtual ::grpc::Status ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::protos::VotesCountForPartyReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VotesCountForPartyReply>> AsyncReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VotesCountForPartyReply>>(AsyncReceiveStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VotesCountForPartyReply>> PrepareAsyncReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::protos::VotesCountForPartyReply>>(PrepareAsyncReceiveStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::protos::VotesCountForPartyReply>> ReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::protos::VotesCountForPartyReply>>(ReciveVotesCountRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::VotesCountForPartyReply>> AsyncReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::VotesCountForPartyReply>>(AsyncReciveVotesCountRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::VotesCountForPartyReply>> PrepareAsyncReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::protos::VotesCountForPartyReply>>(PrepareAsyncReciveVotesCountRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::grpc::ClientReadReactor< ::protos::VotesCountForPartyReply>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::VoteReply>* AsyncReceiveVoteRaw(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::VoteReply>* PrepareAsyncReceiveVoteRaw(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::StartElectionsReply>* AsyncReceiveStartElectionsRaw(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::StartElectionsReply>* PrepareAsyncReceiveStartElectionsRaw(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::EndElectionsReply>* AsyncReceiveEndElectionsRaw(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::EndElectionsReply>* PrepareAsyncReceiveEndElectionsRaw(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::VotesCountForPartyReply>* AsyncReceiveStatusRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::protos::VotesCountForPartyReply>* PrepareAsyncReceiveStatusRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::protos::VotesCountForPartyReply>* ReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protos::VotesCountForPartyReply>* AsyncReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::protos::VotesCountForPartyReply>* PrepareAsyncReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::protos::VoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VoteReply>> AsyncReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VoteReply>>(AsyncReceiveVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VoteReply>> PrepareAsyncReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VoteReply>>(PrepareAsyncReceiveVoteRaw(context, request, cq));
    }
    ::grpc::Status ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::protos::StartElectionsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>> AsyncReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>>(AsyncReceiveStartElectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>> PrepareAsyncReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>>(PrepareAsyncReceiveStartElectionsRaw(context, request, cq));
    }
    ::grpc::Status ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::protos::EndElectionsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>> AsyncReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>>(AsyncReceiveEndElectionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>> PrepareAsyncReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>>(PrepareAsyncReceiveEndElectionsRaw(context, request, cq));
    }
    ::grpc::Status ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::protos::VotesCountForPartyReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>> AsyncReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>>(AsyncReceiveStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>> PrepareAsyncReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>>(PrepareAsyncReceiveStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::protos::VotesCountForPartyReply>> ReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::protos::VotesCountForPartyReply>>(ReciveVotesCountRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>> AsyncReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>>(AsyncReciveVotesCountRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>> PrepareAsyncReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>>(PrepareAsyncReciveVotesCountRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response, std::function<void(::grpc::Status)>) override;
      void ReceiveVote(::grpc::ClientContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response, std::function<void(::grpc::Status)>) override;
      void ReceiveStartElections(::grpc::ClientContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response, std::function<void(::grpc::Status)>) override;
      void ReceiveEndElections(::grpc::ClientContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response, std::function<void(::grpc::Status)>) override;
      void ReceiveStatus(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReciveVotesCount(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest* request, ::grpc::ClientReadReactor< ::protos::VotesCountForPartyReply>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::protos::VoteReply>* AsyncReceiveVoteRaw(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::VoteReply>* PrepareAsyncReceiveVoteRaw(::grpc::ClientContext* context, const ::protos::VoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>* AsyncReceiveStartElectionsRaw(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::StartElectionsReply>* PrepareAsyncReceiveStartElectionsRaw(::grpc::ClientContext* context, const ::protos::StartElectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>* AsyncReceiveEndElectionsRaw(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::EndElectionsReply>* PrepareAsyncReceiveEndElectionsRaw(::grpc::ClientContext* context, const ::protos::EndElectionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>* AsyncReceiveStatusRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::protos::VotesCountForPartyReply>* PrepareAsyncReceiveStatusRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::protos::VotesCountForPartyReply>* ReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request) override;
    ::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>* AsyncReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::protos::VotesCountForPartyReply>* PrepareAsyncReciveVotesCountRaw(::grpc::ClientContext* context, const ::protos::VotesCountForPartyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveVote_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveStartElections_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveEndElections_;
    const ::grpc::internal::RpcMethod rpcmethod_ReceiveStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ReciveVotesCount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ReceiveVote(::grpc::ServerContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response);
    virtual ::grpc::Status ReceiveStartElections(::grpc::ServerContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response);
    virtual ::grpc::Status ReceiveEndElections(::grpc::ServerContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response);
    virtual ::grpc::Status ReceiveStatus(::grpc::ServerContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response);
    virtual ::grpc::Status ReciveVotesCount(::grpc::ServerContext* context, const ::protos::VotesCountForPartyRequest* request, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveVote() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReceiveVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveVote(::grpc::ServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveVote(::grpc::ServerContext* context, ::protos::VoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::protos::VoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveStartElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveStartElections() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReceiveStartElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStartElections(::grpc::ServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveStartElections(::grpc::ServerContext* context, ::protos::StartElectionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::protos::StartElectionsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveEndElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveEndElections() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReceiveEndElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveEndElections(::grpc::ServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveEndElections(::grpc::ServerContext* context, ::protos::EndElectionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::protos::EndElectionsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReceiveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReceiveStatus() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ReceiveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStatus(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveStatus(::grpc::ServerContext* context, ::protos::VotesCountForPartyRequest* request, ::grpc::ServerAsyncResponseWriter< ::protos::VotesCountForPartyReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReciveVotesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReciveVotesCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ReciveVotesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReciveVotesCount(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReciveVotesCount(::grpc::ServerContext* context, ::protos::VotesCountForPartyRequest* request, ::grpc::ServerAsyncWriter< ::protos::VotesCountForPartyReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReceiveVote<WithAsyncMethod_ReceiveStartElections<WithAsyncMethod_ReceiveEndElections<WithAsyncMethod_ReceiveStatus<WithAsyncMethod_ReciveVotesCount<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ReceiveVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveVote() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::VoteRequest, ::protos::VoteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::VoteRequest* request, ::protos::VoteReply* response) { return this->ReceiveVote(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveVote(
        ::grpc::MessageAllocator< ::protos::VoteRequest, ::protos::VoteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::VoteRequest, ::protos::VoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReceiveVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveVote(::grpc::ServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveVote(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveStartElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveStartElections() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::StartElectionsRequest, ::protos::StartElectionsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::StartElectionsRequest* request, ::protos::StartElectionsReply* response) { return this->ReceiveStartElections(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveStartElections(
        ::grpc::MessageAllocator< ::protos::StartElectionsRequest, ::protos::StartElectionsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::StartElectionsRequest, ::protos::StartElectionsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReceiveStartElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStartElections(::grpc::ServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveStartElections(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveEndElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveEndElections() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::EndElectionsRequest, ::protos::EndElectionsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::EndElectionsRequest* request, ::protos::EndElectionsReply* response) { return this->ReceiveEndElections(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveEndElections(
        ::grpc::MessageAllocator< ::protos::EndElectionsRequest, ::protos::EndElectionsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::EndElectionsRequest, ::protos::EndElectionsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReceiveEndElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveEndElections(::grpc::ServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveEndElections(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReceiveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReceiveStatus() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::VotesCountForPartyRequest* request, ::protos::VotesCountForPartyReply* response) { return this->ReceiveStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ReceiveStatus(
        ::grpc::MessageAllocator< ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReceiveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStatus(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReciveVotesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReciveVotesCount() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::protos::VotesCountForPartyRequest* request) { return this->ReciveVotesCount(context, request); }));
    }
    ~WithCallbackMethod_ReciveVotesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReciveVotesCount(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::protos::VotesCountForPartyReply>* ReciveVotesCount(
      ::grpc::CallbackServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ReceiveVote<WithCallbackMethod_ReceiveStartElections<WithCallbackMethod_ReceiveEndElections<WithCallbackMethod_ReceiveStatus<WithCallbackMethod_ReciveVotesCount<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ReceiveVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveVote() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReceiveVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveVote(::grpc::ServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveStartElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveStartElections() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReceiveStartElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStartElections(::grpc::ServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveEndElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveEndElections() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReceiveEndElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveEndElections(::grpc::ServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReceiveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReceiveStatus() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ReceiveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStatus(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReciveVotesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReciveVotesCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ReciveVotesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReciveVotesCount(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveVote() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReceiveVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveVote(::grpc::ServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveStartElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveStartElections() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReceiveStartElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStartElections(::grpc::ServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveStartElections(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveEndElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveEndElections() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReceiveEndElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveEndElections(::grpc::ServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveEndElections(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReceiveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReceiveStatus() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ReceiveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStatus(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReceiveStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReciveVotesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReciveVotesCount() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ReciveVotesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReciveVotesCount(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReciveVotesCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveVote() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReceiveVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveVote(::grpc::ServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveStartElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveStartElections() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveStartElections(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReceiveStartElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStartElections(::grpc::ServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveStartElections(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveEndElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveEndElections() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveEndElections(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReceiveEndElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveEndElections(::grpc::ServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveEndElections(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReceiveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReceiveStatus() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReceiveStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReceiveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReceiveStatus(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReceiveStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReciveVotesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReciveVotesCount() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ReciveVotesCount(context, request); }));
    }
    ~WithRawCallbackMethod_ReciveVotesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReciveVotesCount(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ReciveVotesCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveVote() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::VoteRequest, ::protos::VoteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::VoteRequest, ::protos::VoteReply>* streamer) {
                       return this->StreamedReceiveVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveVote(::grpc::ServerContext* /*context*/, const ::protos::VoteRequest* /*request*/, ::protos::VoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::VoteRequest,::protos::VoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveStartElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveStartElections() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::StartElectionsRequest, ::protos::StartElectionsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::StartElectionsRequest, ::protos::StartElectionsReply>* streamer) {
                       return this->StreamedReceiveStartElections(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveStartElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveStartElections(::grpc::ServerContext* /*context*/, const ::protos::StartElectionsRequest* /*request*/, ::protos::StartElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveStartElections(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::StartElectionsRequest,::protos::StartElectionsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveEndElections : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveEndElections() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::EndElectionsRequest, ::protos::EndElectionsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::EndElectionsRequest, ::protos::EndElectionsReply>* streamer) {
                       return this->StreamedReceiveEndElections(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveEndElections() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveEndElections(::grpc::ServerContext* /*context*/, const ::protos::EndElectionsRequest* /*request*/, ::protos::EndElectionsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveEndElections(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::EndElectionsRequest,::protos::EndElectionsReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReceiveStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReceiveStatus() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>* streamer) {
                       return this->StreamedReceiveStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReceiveStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReceiveStatus(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::protos::VotesCountForPartyReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReceiveStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::protos::VotesCountForPartyRequest,::protos::VotesCountForPartyReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReceiveVote<WithStreamedUnaryMethod_ReceiveStartElections<WithStreamedUnaryMethod_ReceiveEndElections<WithStreamedUnaryMethod_ReceiveStatus<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ReciveVotesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ReciveVotesCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::protos::VotesCountForPartyRequest, ::protos::VotesCountForPartyReply>* streamer) {
                       return this->StreamedReciveVotesCount(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ReciveVotesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReciveVotesCount(::grpc::ServerContext* /*context*/, const ::protos::VotesCountForPartyRequest* /*request*/, ::grpc::ServerWriter< ::protos::VotesCountForPartyReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedReciveVotesCount(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::protos::VotesCountForPartyRequest,::protos::VotesCountForPartyReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ReciveVotesCount<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReceiveVote<WithStreamedUnaryMethod_ReceiveStartElections<WithStreamedUnaryMethod_ReceiveEndElections<WithStreamedUnaryMethod_ReceiveStatus<WithSplitStreamingMethod_ReciveVotesCount<Service > > > > > StreamedService;
};

}  // namespace protos


#endif  // GRPC_Vote_2eproto__INCLUDED

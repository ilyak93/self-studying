// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vote.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_Vote_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Vote_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Vote_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Vote_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Vote_2eproto;
namespace protos {
class EndElectionsReply;
struct EndElectionsReplyDefaultTypeInternal;
extern EndElectionsReplyDefaultTypeInternal _EndElectionsReply_default_instance_;
class EndElectionsRequest;
struct EndElectionsRequestDefaultTypeInternal;
extern EndElectionsRequestDefaultTypeInternal _EndElectionsRequest_default_instance_;
class StartElectionsReply;
struct StartElectionsReplyDefaultTypeInternal;
extern StartElectionsReplyDefaultTypeInternal _StartElectionsReply_default_instance_;
class StartElectionsRequest;
struct StartElectionsRequestDefaultTypeInternal;
extern StartElectionsRequestDefaultTypeInternal _StartElectionsRequest_default_instance_;
class VoteReply;
struct VoteReplyDefaultTypeInternal;
extern VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
class VoteRequest;
struct VoteRequestDefaultTypeInternal;
extern VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
class VotesCountForPartyReply;
struct VotesCountForPartyReplyDefaultTypeInternal;
extern VotesCountForPartyReplyDefaultTypeInternal _VotesCountForPartyReply_default_instance_;
class VotesCountForPartyRequest;
struct VotesCountForPartyRequestDefaultTypeInternal;
extern VotesCountForPartyRequestDefaultTypeInternal _VotesCountForPartyRequest_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace protos {

// ===================================================================


// -------------------------------------------------------------------

class VotesCountForPartyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.VotesCountForPartyRequest) */ {
 public:
  inline VotesCountForPartyRequest() : VotesCountForPartyRequest(nullptr) {}
  ~VotesCountForPartyRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotesCountForPartyRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotesCountForPartyRequest(const VotesCountForPartyRequest& from) : VotesCountForPartyRequest(nullptr, from) {}
  inline VotesCountForPartyRequest(VotesCountForPartyRequest&& from) noexcept
      : VotesCountForPartyRequest(nullptr, std::move(from)) {}
  inline VotesCountForPartyRequest& operator=(const VotesCountForPartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotesCountForPartyRequest& operator=(VotesCountForPartyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotesCountForPartyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotesCountForPartyRequest* internal_default_instance() {
    return reinterpret_cast<const VotesCountForPartyRequest*>(
        &_VotesCountForPartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(VotesCountForPartyRequest& a, VotesCountForPartyRequest& b) { a.Swap(&b); }
  inline void Swap(VotesCountForPartyRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotesCountForPartyRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotesCountForPartyRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VotesCountForPartyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotesCountForPartyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotesCountForPartyRequest& from) { VotesCountForPartyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VotesCountForPartyRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.VotesCountForPartyRequest"; }

 protected:
  explicit VotesCountForPartyRequest(::google::protobuf::Arena* arena);
  VotesCountForPartyRequest(::google::protobuf::Arena* arena, const VotesCountForPartyRequest& from);
  VotesCountForPartyRequest(::google::protobuf::Arena* arena, VotesCountForPartyRequest&& from) noexcept
      : VotesCountForPartyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStateFieldNumber = 1,
    kPartyFieldNumber = 2,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string party = 2;
  void clear_party() ;
  const std::string& party() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_party(Arg_&& arg, Args_... args);
  std::string* mutable_party();
  PROTOBUF_NODISCARD std::string* release_party();
  void set_allocated_party(std::string* value);

  private:
  const std::string& _internal_party() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(
      const std::string& value);
  std::string* _internal_mutable_party();

  public:
  // @@protoc_insertion_point(class_scope:protos.VotesCountForPartyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr party_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class VotesCountForPartyReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.VotesCountForPartyReply) */ {
 public:
  inline VotesCountForPartyReply() : VotesCountForPartyReply(nullptr) {}
  ~VotesCountForPartyReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VotesCountForPartyReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline VotesCountForPartyReply(const VotesCountForPartyReply& from) : VotesCountForPartyReply(nullptr, from) {}
  inline VotesCountForPartyReply(VotesCountForPartyReply&& from) noexcept
      : VotesCountForPartyReply(nullptr, std::move(from)) {}
  inline VotesCountForPartyReply& operator=(const VotesCountForPartyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VotesCountForPartyReply& operator=(VotesCountForPartyReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VotesCountForPartyReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VotesCountForPartyReply* internal_default_instance() {
    return reinterpret_cast<const VotesCountForPartyReply*>(
        &_VotesCountForPartyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(VotesCountForPartyReply& a, VotesCountForPartyReply& b) { a.Swap(&b); }
  inline void Swap(VotesCountForPartyReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VotesCountForPartyReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VotesCountForPartyReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VotesCountForPartyReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VotesCountForPartyReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VotesCountForPartyReply& from) { VotesCountForPartyReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VotesCountForPartyReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.VotesCountForPartyReply"; }

 protected:
  explicit VotesCountForPartyReply(::google::protobuf::Arena* arena);
  VotesCountForPartyReply(::google::protobuf::Arena* arena, const VotesCountForPartyReply& from);
  VotesCountForPartyReply(::google::protobuf::Arena* arena, VotesCountForPartyReply&& from) noexcept
      : VotesCountForPartyReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStateFieldNumber = 1,
    kPartyFieldNumber = 2,
    kVotesCountFieldNumber = 3,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string party = 2;
  void clear_party() ;
  const std::string& party() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_party(Arg_&& arg, Args_... args);
  std::string* mutable_party();
  PROTOBUF_NODISCARD std::string* release_party();
  void set_allocated_party(std::string* value);

  private:
  const std::string& _internal_party() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(
      const std::string& value);
  std::string* _internal_mutable_party();

  public:
  // int32 votesCount = 3;
  void clear_votescount() ;
  ::int32_t votescount() const;
  void set_votescount(::int32_t value);

  private:
  ::int32_t _internal_votescount() const;
  void _internal_set_votescount(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.VotesCountForPartyReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr party_;
    ::int32_t votescount_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class VoteRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.VoteRequest) */ {
 public:
  inline VoteRequest() : VoteRequest(nullptr) {}
  ~VoteRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VoteRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline VoteRequest(const VoteRequest& from) : VoteRequest(nullptr, from) {}
  inline VoteRequest(VoteRequest&& from) noexcept
      : VoteRequest(nullptr, std::move(from)) {}
  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteRequest& operator=(VoteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteRequest* internal_default_instance() {
    return reinterpret_cast<const VoteRequest*>(
        &_VoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(VoteRequest& a, VoteRequest& b) { a.Swap(&b); }
  inline void Swap(VoteRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VoteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VoteRequest& from) { VoteRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VoteRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.VoteRequest"; }

 protected:
  explicit VoteRequest(::google::protobuf::Arena* arena);
  VoteRequest(::google::protobuf::Arena* arena, const VoteRequest& from);
  VoteRequest(::google::protobuf::Arena* arena, VoteRequest&& from) noexcept
      : VoteRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPartyFieldNumber = 2,
    kOriginStateFieldNumber = 3,
    kCurrentStateFieldNumber = 4,
    kTimeStampFieldNumber = 5,
    kClientIDFieldNumber = 1,
  };
  // string party = 2;
  void clear_party() ;
  const std::string& party() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_party(Arg_&& arg, Args_... args);
  std::string* mutable_party();
  PROTOBUF_NODISCARD std::string* release_party();
  void set_allocated_party(std::string* value);

  private:
  const std::string& _internal_party() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(
      const std::string& value);
  std::string* _internal_mutable_party();

  public:
  // string originState = 3;
  void clear_originstate() ;
  const std::string& originstate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originstate(Arg_&& arg, Args_... args);
  std::string* mutable_originstate();
  PROTOBUF_NODISCARD std::string* release_originstate();
  void set_allocated_originstate(std::string* value);

  private:
  const std::string& _internal_originstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originstate(
      const std::string& value);
  std::string* _internal_mutable_originstate();

  public:
  // string currentState = 4;
  void clear_currentstate() ;
  const std::string& currentstate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currentstate(Arg_&& arg, Args_... args);
  std::string* mutable_currentstate();
  PROTOBUF_NODISCARD std::string* release_currentstate();
  void set_allocated_currentstate(std::string* value);

  private:
  const std::string& _internal_currentstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentstate(
      const std::string& value);
  std::string* _internal_mutable_currentstate();

  public:
  // uint64 timeStamp = 5;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // int32 clientID = 1;
  void clear_clientid() ;
  ::int32_t clientid() const;
  void set_clientid(::int32_t value);

  private:
  ::int32_t _internal_clientid() const;
  void _internal_set_clientid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.VoteRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr party_;
    ::google::protobuf::internal::ArenaStringPtr originstate_;
    ::google::protobuf::internal::ArenaStringPtr currentstate_;
    ::uint64_t timestamp_;
    ::int32_t clientid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class VoteReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:protos.VoteReply) */ {
 public:
  inline VoteReply() : VoteReply(nullptr) {}
  ~VoteReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VoteReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline VoteReply(const VoteReply& from) : VoteReply(nullptr, from) {}
  inline VoteReply(VoteReply&& from) noexcept
      : VoteReply(nullptr, std::move(from)) {}
  inline VoteReply& operator=(const VoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteReply& operator=(VoteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteReply* internal_default_instance() {
    return reinterpret_cast<const VoteReply*>(
        &_VoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VoteReply& a, VoteReply& b) { a.Swap(&b); }
  inline void Swap(VoteReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VoteReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VoteReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VoteReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VoteReply& from) { VoteReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VoteReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.VoteReply"; }

 protected:
  explicit VoteReply(::google::protobuf::Arena* arena);
  VoteReply(::google::protobuf::Arena* arena, const VoteReply& from);
  VoteReply(::google::protobuf::Arena* arena, VoteReply&& from) noexcept
      : VoteReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPartyFieldNumber = 2,
    kOriginStateFieldNumber = 3,
    kCurrentStateFieldNumber = 4,
    kClientIDFieldNumber = 1,
    kServerIDFieldNumber = 6,
    kTimeStampFieldNumber = 5,
  };
  // string party = 2;
  void clear_party() ;
  const std::string& party() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_party(Arg_&& arg, Args_... args);
  std::string* mutable_party();
  PROTOBUF_NODISCARD std::string* release_party();
  void set_allocated_party(std::string* value);

  private:
  const std::string& _internal_party() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_party(
      const std::string& value);
  std::string* _internal_mutable_party();

  public:
  // string originState = 3;
  void clear_originstate() ;
  const std::string& originstate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_originstate(Arg_&& arg, Args_... args);
  std::string* mutable_originstate();
  PROTOBUF_NODISCARD std::string* release_originstate();
  void set_allocated_originstate(std::string* value);

  private:
  const std::string& _internal_originstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_originstate(
      const std::string& value);
  std::string* _internal_mutable_originstate();

  public:
  // string currentState = 4;
  void clear_currentstate() ;
  const std::string& currentstate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currentstate(Arg_&& arg, Args_... args);
  std::string* mutable_currentstate();
  PROTOBUF_NODISCARD std::string* release_currentstate();
  void set_allocated_currentstate(std::string* value);

  private:
  const std::string& _internal_currentstate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currentstate(
      const std::string& value);
  std::string* _internal_mutable_currentstate();

  public:
  // int32 clientID = 1;
  void clear_clientid() ;
  ::int32_t clientid() const;
  void set_clientid(::int32_t value);

  private:
  ::int32_t _internal_clientid() const;
  void _internal_set_clientid(::int32_t value);

  public:
  // int32 serverID = 6;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // uint64 timeStamp = 5;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:protos.VoteReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr party_;
    ::google::protobuf::internal::ArenaStringPtr originstate_;
    ::google::protobuf::internal::ArenaStringPtr currentstate_;
    ::int32_t clientid_;
    ::int32_t serverid_;
    ::uint64_t timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class StartElectionsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protos.StartElectionsRequest) */ {
 public:
  inline StartElectionsRequest() : StartElectionsRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StartElectionsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StartElectionsRequest(const StartElectionsRequest& from) : StartElectionsRequest(nullptr, from) {}
  inline StartElectionsRequest(StartElectionsRequest&& from) noexcept
      : StartElectionsRequest(nullptr, std::move(from)) {}
  inline StartElectionsRequest& operator=(const StartElectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartElectionsRequest& operator=(StartElectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartElectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartElectionsRequest* internal_default_instance() {
    return reinterpret_cast<const StartElectionsRequest*>(
        &_StartElectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StartElectionsRequest& a, StartElectionsRequest& b) { a.Swap(&b); }
  inline void Swap(StartElectionsRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartElectionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartElectionsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<StartElectionsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartElectionsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartElectionsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.StartElectionsRequest"; }

 protected:
  explicit StartElectionsRequest(::google::protobuf::Arena* arena);
  StartElectionsRequest(::google::protobuf::Arena* arena, const StartElectionsRequest& from);
  StartElectionsRequest(::google::protobuf::Arena* arena, StartElectionsRequest&& from) noexcept
      : StartElectionsRequest(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protos.StartElectionsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class StartElectionsReply final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protos.StartElectionsReply) */ {
 public:
  inline StartElectionsReply() : StartElectionsReply(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StartElectionsReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline StartElectionsReply(const StartElectionsReply& from) : StartElectionsReply(nullptr, from) {}
  inline StartElectionsReply(StartElectionsReply&& from) noexcept
      : StartElectionsReply(nullptr, std::move(from)) {}
  inline StartElectionsReply& operator=(const StartElectionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartElectionsReply& operator=(StartElectionsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartElectionsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartElectionsReply* internal_default_instance() {
    return reinterpret_cast<const StartElectionsReply*>(
        &_StartElectionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(StartElectionsReply& a, StartElectionsReply& b) { a.Swap(&b); }
  inline void Swap(StartElectionsReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartElectionsReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartElectionsReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<StartElectionsReply>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StartElectionsReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StartElectionsReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.StartElectionsReply"; }

 protected:
  explicit StartElectionsReply(::google::protobuf::Arena* arena);
  StartElectionsReply(::google::protobuf::Arena* arena, const StartElectionsReply& from);
  StartElectionsReply(::google::protobuf::Arena* arena, StartElectionsReply&& from) noexcept
      : StartElectionsReply(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protos.StartElectionsReply)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class EndElectionsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protos.EndElectionsRequest) */ {
 public:
  inline EndElectionsRequest() : EndElectionsRequest(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EndElectionsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline EndElectionsRequest(const EndElectionsRequest& from) : EndElectionsRequest(nullptr, from) {}
  inline EndElectionsRequest(EndElectionsRequest&& from) noexcept
      : EndElectionsRequest(nullptr, std::move(from)) {}
  inline EndElectionsRequest& operator=(const EndElectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndElectionsRequest& operator=(EndElectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndElectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndElectionsRequest* internal_default_instance() {
    return reinterpret_cast<const EndElectionsRequest*>(
        &_EndElectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(EndElectionsRequest& a, EndElectionsRequest& b) { a.Swap(&b); }
  inline void Swap(EndElectionsRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndElectionsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndElectionsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<EndElectionsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EndElectionsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EndElectionsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.EndElectionsRequest"; }

 protected:
  explicit EndElectionsRequest(::google::protobuf::Arena* arena);
  EndElectionsRequest(::google::protobuf::Arena* arena, const EndElectionsRequest& from);
  EndElectionsRequest(::google::protobuf::Arena* arena, EndElectionsRequest&& from) noexcept
      : EndElectionsRequest(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protos.EndElectionsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_Vote_2eproto;
};
// -------------------------------------------------------------------

class EndElectionsReply final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:protos.EndElectionsReply) */ {
 public:
  inline EndElectionsReply() : EndElectionsReply(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EndElectionsReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline EndElectionsReply(const EndElectionsReply& from) : EndElectionsReply(nullptr, from) {}
  inline EndElectionsReply(EndElectionsReply&& from) noexcept
      : EndElectionsReply(nullptr, std::move(from)) {}
  inline EndElectionsReply& operator=(const EndElectionsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndElectionsReply& operator=(EndElectionsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndElectionsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndElectionsReply* internal_default_instance() {
    return reinterpret_cast<const EndElectionsReply*>(
        &_EndElectionsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(EndElectionsReply& a, EndElectionsReply& b) { a.Swap(&b); }
  inline void Swap(EndElectionsReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndElectionsReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndElectionsReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<EndElectionsReply>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EndElectionsReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EndElectionsReply& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "protos.EndElectionsReply"; }

 protected:
  explicit EndElectionsReply(::google::protobuf::Arena* arena);
  EndElectionsReply(::google::protobuf::Arena* arena, const EndElectionsReply& from);
  EndElectionsReply(::google::protobuf::Arena* arena, EndElectionsReply&& from) noexcept
      : EndElectionsReply(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:protos.EndElectionsReply)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_Vote_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VoteRequest

// int32 clientID = 1;
inline void VoteRequest::clear_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_ = 0;
}
inline ::int32_t VoteRequest::clientid() const {
  // @@protoc_insertion_point(field_get:protos.VoteRequest.clientID)
  return _internal_clientid();
}
inline void VoteRequest::set_clientid(::int32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:protos.VoteRequest.clientID)
}
inline ::int32_t VoteRequest::_internal_clientid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clientid_;
}
inline void VoteRequest::_internal_set_clientid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_ = value;
}

// string party = 2;
inline void VoteRequest::clear_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.ClearToEmpty();
}
inline const std::string& VoteRequest::party() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VoteRequest.party)
  return _internal_party();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoteRequest::set_party(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VoteRequest.party)
}
inline std::string* VoteRequest::mutable_party() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_party();
  // @@protoc_insertion_point(field_mutable:protos.VoteRequest.party)
  return _s;
}
inline const std::string& VoteRequest::_internal_party() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.party_.Get();
}
inline void VoteRequest::_internal_set_party(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(value, GetArena());
}
inline std::string* VoteRequest::_internal_mutable_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.party_.Mutable( GetArena());
}
inline std::string* VoteRequest::release_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VoteRequest.party)
  return _impl_.party_.Release();
}
inline void VoteRequest::set_allocated_party(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.party_.IsDefault()) {
          _impl_.party_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VoteRequest.party)
}

// string originState = 3;
inline void VoteRequest::clear_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.ClearToEmpty();
}
inline const std::string& VoteRequest::originstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VoteRequest.originState)
  return _internal_originstate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoteRequest::set_originstate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VoteRequest.originState)
}
inline std::string* VoteRequest::mutable_originstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originstate();
  // @@protoc_insertion_point(field_mutable:protos.VoteRequest.originState)
  return _s;
}
inline const std::string& VoteRequest::_internal_originstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.originstate_.Get();
}
inline void VoteRequest::_internal_set_originstate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.Set(value, GetArena());
}
inline std::string* VoteRequest::_internal_mutable_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.originstate_.Mutable( GetArena());
}
inline std::string* VoteRequest::release_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VoteRequest.originState)
  return _impl_.originstate_.Release();
}
inline void VoteRequest::set_allocated_originstate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.originstate_.IsDefault()) {
          _impl_.originstate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VoteRequest.originState)
}

// string currentState = 4;
inline void VoteRequest::clear_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.ClearToEmpty();
}
inline const std::string& VoteRequest::currentstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VoteRequest.currentState)
  return _internal_currentstate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoteRequest::set_currentstate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VoteRequest.currentState)
}
inline std::string* VoteRequest::mutable_currentstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currentstate();
  // @@protoc_insertion_point(field_mutable:protos.VoteRequest.currentState)
  return _s;
}
inline const std::string& VoteRequest::_internal_currentstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currentstate_.Get();
}
inline void VoteRequest::_internal_set_currentstate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.Set(value, GetArena());
}
inline std::string* VoteRequest::_internal_mutable_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.currentstate_.Mutable( GetArena());
}
inline std::string* VoteRequest::release_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VoteRequest.currentState)
  return _impl_.currentstate_.Release();
}
inline void VoteRequest::set_allocated_currentstate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currentstate_.IsDefault()) {
          _impl_.currentstate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VoteRequest.currentState)
}

// uint64 timeStamp = 5;
inline void VoteRequest::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t VoteRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:protos.VoteRequest.timeStamp)
  return _internal_timestamp();
}
inline void VoteRequest::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protos.VoteRequest.timeStamp)
}
inline ::uint64_t VoteRequest::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void VoteRequest::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// VoteReply

// int32 clientID = 1;
inline void VoteReply::clear_clientid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_ = 0;
}
inline ::int32_t VoteReply::clientid() const {
  // @@protoc_insertion_point(field_get:protos.VoteReply.clientID)
  return _internal_clientid();
}
inline void VoteReply::set_clientid(::int32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:protos.VoteReply.clientID)
}
inline ::int32_t VoteReply::_internal_clientid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.clientid_;
}
inline void VoteReply::_internal_set_clientid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.clientid_ = value;
}

// string party = 2;
inline void VoteReply::clear_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.ClearToEmpty();
}
inline const std::string& VoteReply::party() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VoteReply.party)
  return _internal_party();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoteReply::set_party(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VoteReply.party)
}
inline std::string* VoteReply::mutable_party() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_party();
  // @@protoc_insertion_point(field_mutable:protos.VoteReply.party)
  return _s;
}
inline const std::string& VoteReply::_internal_party() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.party_.Get();
}
inline void VoteReply::_internal_set_party(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(value, GetArena());
}
inline std::string* VoteReply::_internal_mutable_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.party_.Mutable( GetArena());
}
inline std::string* VoteReply::release_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VoteReply.party)
  return _impl_.party_.Release();
}
inline void VoteReply::set_allocated_party(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.party_.IsDefault()) {
          _impl_.party_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VoteReply.party)
}

// string originState = 3;
inline void VoteReply::clear_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.ClearToEmpty();
}
inline const std::string& VoteReply::originstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VoteReply.originState)
  return _internal_originstate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoteReply::set_originstate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VoteReply.originState)
}
inline std::string* VoteReply::mutable_originstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_originstate();
  // @@protoc_insertion_point(field_mutable:protos.VoteReply.originState)
  return _s;
}
inline const std::string& VoteReply::_internal_originstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.originstate_.Get();
}
inline void VoteReply::_internal_set_originstate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.Set(value, GetArena());
}
inline std::string* VoteReply::_internal_mutable_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.originstate_.Mutable( GetArena());
}
inline std::string* VoteReply::release_originstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VoteReply.originState)
  return _impl_.originstate_.Release();
}
inline void VoteReply::set_allocated_originstate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.originstate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.originstate_.IsDefault()) {
          _impl_.originstate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VoteReply.originState)
}

// string currentState = 4;
inline void VoteReply::clear_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.ClearToEmpty();
}
inline const std::string& VoteReply::currentstate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VoteReply.currentState)
  return _internal_currentstate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VoteReply::set_currentstate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VoteReply.currentState)
}
inline std::string* VoteReply::mutable_currentstate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_currentstate();
  // @@protoc_insertion_point(field_mutable:protos.VoteReply.currentState)
  return _s;
}
inline const std::string& VoteReply::_internal_currentstate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currentstate_.Get();
}
inline void VoteReply::_internal_set_currentstate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.Set(value, GetArena());
}
inline std::string* VoteReply::_internal_mutable_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.currentstate_.Mutable( GetArena());
}
inline std::string* VoteReply::release_currentstate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VoteReply.currentState)
  return _impl_.currentstate_.Release();
}
inline void VoteReply::set_allocated_currentstate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currentstate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currentstate_.IsDefault()) {
          _impl_.currentstate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VoteReply.currentState)
}

// uint64 timeStamp = 5;
inline void VoteReply::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t VoteReply::timestamp() const {
  // @@protoc_insertion_point(field_get:protos.VoteReply.timeStamp)
  return _internal_timestamp();
}
inline void VoteReply::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:protos.VoteReply.timeStamp)
}
inline ::uint64_t VoteReply::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void VoteReply::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = value;
}

// int32 serverID = 6;
inline void VoteReply::clear_serverid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = 0;
}
inline ::int32_t VoteReply::serverid() const {
  // @@protoc_insertion_point(field_get:protos.VoteReply.serverID)
  return _internal_serverid();
}
inline void VoteReply::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:protos.VoteReply.serverID)
}
inline ::int32_t VoteReply::_internal_serverid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.serverid_;
}
inline void VoteReply::_internal_set_serverid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.serverid_ = value;
}

// -------------------------------------------------------------------

// StartElectionsRequest

// -------------------------------------------------------------------

// StartElectionsReply

// -------------------------------------------------------------------

// EndElectionsRequest

// -------------------------------------------------------------------

// EndElectionsReply

// -------------------------------------------------------------------

// VotesCountForPartyRequest

// string state = 1;
inline void VotesCountForPartyRequest::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& VotesCountForPartyRequest::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotesCountForPartyRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotesCountForPartyRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotesCountForPartyRequest.state)
}
inline std::string* VotesCountForPartyRequest::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:protos.VotesCountForPartyRequest.state)
  return _s;
}
inline const std::string& VotesCountForPartyRequest::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void VotesCountForPartyRequest::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.Set(value, GetArena());
}
inline std::string* VotesCountForPartyRequest::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* VotesCountForPartyRequest::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotesCountForPartyRequest.state)
  return _impl_.state_.Release();
}
inline void VotesCountForPartyRequest::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotesCountForPartyRequest.state)
}

// string party = 2;
inline void VotesCountForPartyRequest::clear_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.ClearToEmpty();
}
inline const std::string& VotesCountForPartyRequest::party() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotesCountForPartyRequest.party)
  return _internal_party();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotesCountForPartyRequest::set_party(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotesCountForPartyRequest.party)
}
inline std::string* VotesCountForPartyRequest::mutable_party() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_party();
  // @@protoc_insertion_point(field_mutable:protos.VotesCountForPartyRequest.party)
  return _s;
}
inline const std::string& VotesCountForPartyRequest::_internal_party() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.party_.Get();
}
inline void VotesCountForPartyRequest::_internal_set_party(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(value, GetArena());
}
inline std::string* VotesCountForPartyRequest::_internal_mutable_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.party_.Mutable( GetArena());
}
inline std::string* VotesCountForPartyRequest::release_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotesCountForPartyRequest.party)
  return _impl_.party_.Release();
}
inline void VotesCountForPartyRequest::set_allocated_party(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.party_.IsDefault()) {
          _impl_.party_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotesCountForPartyRequest.party)
}

// -------------------------------------------------------------------

// VotesCountForPartyReply

// string state = 1;
inline void VotesCountForPartyReply::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& VotesCountForPartyReply::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotesCountForPartyReply.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotesCountForPartyReply::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotesCountForPartyReply.state)
}
inline std::string* VotesCountForPartyReply::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:protos.VotesCountForPartyReply.state)
  return _s;
}
inline const std::string& VotesCountForPartyReply::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void VotesCountForPartyReply::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.Set(value, GetArena());
}
inline std::string* VotesCountForPartyReply::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* VotesCountForPartyReply::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotesCountForPartyReply.state)
  return _impl_.state_.Release();
}
inline void VotesCountForPartyReply::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotesCountForPartyReply.state)
}

// string party = 2;
inline void VotesCountForPartyReply::clear_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.ClearToEmpty();
}
inline const std::string& VotesCountForPartyReply::party() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:protos.VotesCountForPartyReply.party)
  return _internal_party();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VotesCountForPartyReply::set_party(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:protos.VotesCountForPartyReply.party)
}
inline std::string* VotesCountForPartyReply::mutable_party() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_party();
  // @@protoc_insertion_point(field_mutable:protos.VotesCountForPartyReply.party)
  return _s;
}
inline const std::string& VotesCountForPartyReply::_internal_party() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.party_.Get();
}
inline void VotesCountForPartyReply::_internal_set_party(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.Set(value, GetArena());
}
inline std::string* VotesCountForPartyReply::_internal_mutable_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.party_.Mutable( GetArena());
}
inline std::string* VotesCountForPartyReply::release_party() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:protos.VotesCountForPartyReply.party)
  return _impl_.party_.Release();
}
inline void VotesCountForPartyReply::set_allocated_party(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.party_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.party_.IsDefault()) {
          _impl_.party_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.VotesCountForPartyReply.party)
}

// int32 votesCount = 3;
inline void VotesCountForPartyReply::clear_votescount() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.votescount_ = 0;
}
inline ::int32_t VotesCountForPartyReply::votescount() const {
  // @@protoc_insertion_point(field_get:protos.VotesCountForPartyReply.votesCount)
  return _internal_votescount();
}
inline void VotesCountForPartyReply::set_votescount(::int32_t value) {
  _internal_set_votescount(value);
  // @@protoc_insertion_point(field_set:protos.VotesCountForPartyReply.votesCount)
}
inline ::int32_t VotesCountForPartyReply::_internal_votescount() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.votescount_;
}
inline void VotesCountForPartyReply::_internal_set_votescount(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.votescount_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Vote_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Paxos.proto
// Protobuf C++ Version: 5.26.1

#include "Paxos.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace protos {

inline constexpr VotePax::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : party_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        originstate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currentstate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        clientid_{0},
        sessionid_{0},
        timestamp_{::uint64_t{0u}},
        leaderid_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VotePax::VotePax(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VotePaxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VotePaxDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VotePaxDefaultTypeInternal() {}
  union {
    VotePax _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VotePaxDefaultTypeInternal _VotePax_default_instance_;

inline constexpr Prepare::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_{::uint64_t{0u}},
        roundnumber_{0},
        serverid_{0},
        sessionid_{0},
        leaderid_{0},
        voterid_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Prepare::Prepare(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PrepareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrepareDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrepareDefaultTypeInternal() {}
  union {
    Prepare _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrepareDefaultTypeInternal _Prepare_default_instance_;

inline constexpr Init::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : serverid_{0},
        sessionid_{0},
        leaderid_{0},
        voterid_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Init::Init(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitDefaultTypeInternal() {}
  union {
    Init _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitDefaultTypeInternal _Init_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR Finish::Finish(::_pbi::ConstantInitialized) {}
struct FinishDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FinishDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FinishDefaultTypeInternal() {}
  union {
    Finish _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FinishDefaultTypeInternal _Finish_default_instance_;

inline constexpr Session::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vote_{nullptr},
        sessionid_{0},
        serverid_{0},
        lastround_{0},
        lastgoodround_{0},
        isdecided_{false},
        leaderid_{0},
        voterid_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Session::Session(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDefaultTypeInternal _Session_default_instance_;

inline constexpr Promise::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vote_{nullptr},
        roundnumber_{0},
        ack_{false},
        lastgoodround_{0},
        serverid_{0},
        sessionid_{0},
        leaderid_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Promise::Promise(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PromiseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PromiseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PromiseDefaultTypeInternal() {}
  union {
    Promise _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PromiseDefaultTypeInternal _Promise_default_instance_;

inline constexpr Commit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vote_{nullptr},
        sessionid_{0},
        leaderid_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Commit::Commit(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDefaultTypeInternal() {}
  union {
    Commit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDefaultTypeInternal _Commit_default_instance_;

inline constexpr Accepted::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vote_{nullptr},
        roundnumber_{0},
        ack_{false},
        serverid_{0},
        sessionid_{0},
        leaderid_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Accepted::Accepted(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AcceptedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptedDefaultTypeInternal() {}
  union {
    Accepted _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptedDefaultTypeInternal _Accepted_default_instance_;

inline constexpr Accept::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        vote_{nullptr},
        roundnumber_{0},
        serverid_{0},
        sessionid_{0},
        leaderid_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Accept::Accept(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AcceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptDefaultTypeInternal() {}
  union {
    Accept _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptDefaultTypeInternal _Accept_default_instance_;
}  // namespace protos
static ::_pb::Metadata file_level_metadata_Paxos_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Paxos_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Paxos_2eproto = nullptr;
const ::uint32_t
    TableStruct_Paxos_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.clientid_),
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.party_),
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.originstate_),
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.currentstate_),
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::VotePax, _impl_.leaderid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Init, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Init, _impl_.serverid_),
        PROTOBUF_FIELD_OFFSET(::protos::Init, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Init, _impl_.leaderid_),
        PROTOBUF_FIELD_OFFSET(::protos::Init, _impl_.voterid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _impl_.roundnumber_),
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _impl_.serverid_),
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _impl_.leaderid_),
        PROTOBUF_FIELD_OFFSET(::protos::Prepare, _impl_.voterid_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.roundnumber_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.ack_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.lastgoodround_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.vote_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.serverid_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Promise, _impl_.leaderid_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _impl_.roundnumber_),
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _impl_.vote_),
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _impl_.serverid_),
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Accept, _impl_.leaderid_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_.roundnumber_),
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_.ack_),
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_.vote_),
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_.serverid_),
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Accepted, _impl_.leaderid_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.serverid_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.lastround_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.lastgoodround_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.vote_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.isdecided_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.leaderid_),
        PROTOBUF_FIELD_OFFSET(::protos::Session, _impl_.voterid_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::protos::Commit, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::protos::Commit, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::protos::Commit, _impl_.sessionid_),
        PROTOBUF_FIELD_OFFSET(::protos::Commit, _impl_.leaderid_),
        PROTOBUF_FIELD_OFFSET(::protos::Commit, _impl_.vote_),
        ~0u,
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::protos::Finish, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::protos::VotePax)},
        {15, -1, -1, sizeof(::protos::Init)},
        {27, -1, -1, sizeof(::protos::Prepare)},
        {41, 56, -1, sizeof(::protos::Promise)},
        {63, 76, -1, sizeof(::protos::Accept)},
        {81, 95, -1, sizeof(::protos::Accepted)},
        {101, 117, -1, sizeof(::protos::Session)},
        {125, 136, -1, sizeof(::protos::Commit)},
        {139, -1, -1, sizeof(::protos::Finish)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::protos::_VotePax_default_instance_._instance,
    &::protos::_Init_default_instance_._instance,
    &::protos::_Prepare_default_instance_._instance,
    &::protos::_Promise_default_instance_._instance,
    &::protos::_Accept_default_instance_._instance,
    &::protos::_Accepted_default_instance_._instance,
    &::protos::_Session_default_instance_._instance,
    &::protos::_Commit_default_instance_._instance,
    &::protos::_Finish_default_instance_._instance,
};
const char descriptor_table_protodef_Paxos_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013Paxos.proto\022\006protos\"\215\001\n\007VotePax\022\020\n\010cli"
    "entID\030\001 \001(\005\022\r\n\005party\030\002 \001(\t\022\023\n\013originStat"
    "e\030\003 \001(\t\022\024\n\014currentState\030\004 \001(\t\022\021\n\ttimeSta"
    "mp\030\005 \001(\004\022\021\n\tsessionID\030\006 \001(\005\022\020\n\010leaderID\030"
    "\007 \001(\005\"N\n\004Init\022\020\n\010serverID\030\001 \001(\005\022\021\n\tsessi"
    "onID\030\002 \001(\005\022\020\n\010leaderID\030\003 \001(\005\022\017\n\007voterID\030"
    "\004 \001(\005\"y\n\007Prepare\022\023\n\013roundNumber\030\001 \001(\005\022\021\n"
    "\ttimeStamp\030\002 \001(\004\022\020\n\010serverID\030\003 \001(\005\022\021\n\tse"
    "ssionID\030\004 \001(\005\022\020\n\010leaderID\030\005 \001(\005\022\017\n\007voter"
    "ID\030\006 \001(\005\"\230\001\n\007Promise\022\023\n\013roundNumber\030\001 \001("
    "\005\022\013\n\003ack\030\002 \001(\010\022\025\n\rlastGoodRound\030\003 \001(\005\022\035\n"
    "\004vote\030\005 \001(\0132\017.protos.VotePax\022\020\n\010serverID"
    "\030\006 \001(\005\022\021\n\tsessionID\030\007 \001(\005\022\020\n\010leaderID\030\010 "
    "\001(\005\"s\n\006Accept\022\023\n\013roundNumber\030\001 \001(\005\022\035\n\004vo"
    "te\030\002 \001(\0132\017.protos.VotePax\022\020\n\010serverID\030\003 "
    "\001(\005\022\021\n\tsessionID\030\004 \001(\005\022\020\n\010leaderID\030\005 \001(\005"
    "\"\202\001\n\010Accepted\022\023\n\013roundNumber\030\001 \001(\005\022\013\n\003ac"
    "k\030\002 \001(\010\022\035\n\004vote\030\004 \001(\0132\017.protos.VotePax\022\020"
    "\n\010serverID\030\005 \001(\005\022\021\n\tsessionID\030\006 \001(\005\022\020\n\010l"
    "eaderID\030\007 \001(\005\"\255\001\n\007Session\022\021\n\tsessionID\030\001"
    " \001(\005\022\020\n\010serverID\030\002 \001(\005\022\021\n\tlastRound\030\003 \001("
    "\005\022\025\n\rlastGoodRound\030\004 \001(\005\022\035\n\004vote\030\005 \001(\0132\017"
    ".protos.VotePax\022\021\n\tisDecided\030\006 \001(\010\022\020\n\010le"
    "aderID\030\007 \001(\005\022\017\n\007voterID\030\010 \001(\005\"L\n\006Commit\022"
    "\021\n\tsessionID\030\001 \001(\005\022\020\n\010leaderID\030\007 \001(\005\022\035\n\004"
    "vote\030\005 \001(\0132\017.protos.VotePax\"\010\n\006Finish2\361\001"
    "\n\014PaxosGreeter\0221\n\021UponReceivingInit\022\014.pr"
    "otos.Init\032\014.protos.Init\"\000\022:\n\024UponReceivi"
    "ngPrepare\022\017.protos.Prepare\032\017.protos.Prom"
    "ise\"\000\0229\n\023UponReceivingAccept\022\016.protos.Ac"
    "cept\032\020.protos.Accepted\"\000\0227\n\023UponReceivin"
    "gCommit\022\016.protos.Commit\032\016.protos.Finish\""
    "\000b\006proto3"
};
static ::absl::once_flag descriptor_table_Paxos_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Paxos_2eproto = {
    false,
    false,
    1289,
    descriptor_table_protodef_Paxos_2eproto,
    "Paxos.proto",
    &descriptor_table_Paxos_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_Paxos_2eproto::offsets,
    file_level_metadata_Paxos_2eproto,
    file_level_enum_descriptors_Paxos_2eproto,
    file_level_service_descriptors_Paxos_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Paxos_2eproto_getter() {
  return &descriptor_table_Paxos_2eproto;
}
namespace protos {
// ===================================================================

class VotePax::_Internal {
 public:
};

VotePax::VotePax(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.VotePax)
}
inline PROTOBUF_NDEBUG_INLINE VotePax::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : party_(arena, from.party_),
        originstate_(arena, from.originstate_),
        currentstate_(arena, from.currentstate_),
        _cached_size_{0} {}

VotePax::VotePax(
    ::google::protobuf::Arena* arena,
    const VotePax& from)
    : ::google::protobuf::Message(arena) {
  VotePax* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, clientid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, clientid_),
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, clientid_) +
               sizeof(Impl_::leaderid_));

  // @@protoc_insertion_point(copy_constructor:protos.VotePax)
}
inline PROTOBUF_NDEBUG_INLINE VotePax::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : party_(arena),
        originstate_(arena),
        currentstate_(arena),
        _cached_size_{0} {}

inline void VotePax::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, clientid_),
           0,
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, clientid_) +
               sizeof(Impl_::leaderid_));
}
VotePax::~VotePax() {
  // @@protoc_insertion_point(destructor:protos.VotePax)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VotePax::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.party_.Destroy();
  _impl_.originstate_.Destroy();
  _impl_.currentstate_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
VotePax::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(VotePax, _impl_._cached_size_),
              false,
          },
          &VotePax::MergeImpl,
          &VotePax::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void VotePax::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.VotePax)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.party_.ClearToEmpty();
  _impl_.originstate_.ClearToEmpty();
  _impl_.currentstate_.ClearToEmpty();
  ::memset(&_impl_.clientid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leaderid_) -
      reinterpret_cast<char*>(&_impl_.clientid_)) + sizeof(_impl_.leaderid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VotePax::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 51, 2> VotePax::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VotePax_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::VotePax>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 clientID = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VotePax, _impl_.clientid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.clientid_)}},
    // string party = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.party_)}},
    // string originState = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.originstate_)}},
    // string currentState = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.currentstate_)}},
    // uint64 timeStamp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(VotePax, _impl_.timestamp_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.timestamp_)}},
    // int32 sessionID = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VotePax, _impl_.sessionid_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.sessionid_)}},
    // int32 leaderID = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VotePax, _impl_.leaderid_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(VotePax, _impl_.leaderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 clientID = 1;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.clientid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string party = 2;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.party_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string originState = 3;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.originstate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currentState = 4;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.currentstate_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint64 timeStamp = 5;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int32 sessionID = 6;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.sessionid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderID = 7;
    {PROTOBUF_FIELD_OFFSET(VotePax, _impl_.leaderid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\16\0\5\13\14\0\0\0"
    "protos.VotePax"
    "party"
    "originState"
    "currentState"
  }},
};

::uint8_t* VotePax::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.VotePax)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 clientID = 1;
  if (this->_internal_clientid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_clientid(), target);
  }

  // string party = 2;
  if (!this->_internal_party().empty()) {
    const std::string& _s = this->_internal_party();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.VotePax.party");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string originState = 3;
  if (!this->_internal_originstate().empty()) {
    const std::string& _s = this->_internal_originstate();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.VotePax.originState");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string currentState = 4;
  if (!this->_internal_currentstate().empty()) {
    const std::string& _s = this->_internal_currentstate();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "protos.VotePax.currentState");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // uint64 timeStamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_timestamp(), target);
  }

  // int32 sessionID = 6;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.VotePax)
  return target;
}

::size_t VotePax::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.VotePax)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string party = 2;
  if (!this->_internal_party().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_party());
  }

  // string originState = 3;
  if (!this->_internal_originstate().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_originstate());
  }

  // string currentState = 4;
  if (!this->_internal_currentstate().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_currentstate());
  }

  // int32 clientID = 1;
  if (this->_internal_clientid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_clientid());
  }

  // int32 sessionID = 6;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // uint64 timeStamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void VotePax::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VotePax*>(&to_msg);
  auto& from = static_cast<const VotePax&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.VotePax)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_party().empty()) {
    _this->_internal_set_party(from._internal_party());
  }
  if (!from._internal_originstate().empty()) {
    _this->_internal_set_originstate(from._internal_originstate());
  }
  if (!from._internal_currentstate().empty()) {
    _this->_internal_set_currentstate(from._internal_currentstate());
  }
  if (from._internal_clientid() != 0) {
    _this->_impl_.clientid_ = from._impl_.clientid_;
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VotePax::CopyFrom(const VotePax& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.VotePax)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VotePax::IsInitialized() const {
  return true;
}

void VotePax::InternalSwap(VotePax* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.party_, &other->_impl_.party_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.originstate_, &other->_impl_.originstate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currentstate_, &other->_impl_.currentstate_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VotePax, _impl_.leaderid_)
      + sizeof(VotePax::_impl_.leaderid_)
      - PROTOBUF_FIELD_OFFSET(VotePax, _impl_.clientid_)>(
          reinterpret_cast<char*>(&_impl_.clientid_),
          reinterpret_cast<char*>(&other->_impl_.clientid_));
}

::google::protobuf::Metadata VotePax::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[0]);
}
// ===================================================================

class Init::_Internal {
 public:
};

Init::Init(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Init)
}
Init::Init(
    ::google::protobuf::Arena* arena, const Init& from)
    : Init(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Init::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Init::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serverid_),
           0,
           offsetof(Impl_, voterid_) -
               offsetof(Impl_, serverid_) +
               sizeof(Impl_::voterid_));
}
Init::~Init() {
  // @@protoc_insertion_point(destructor:protos.Init)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Init::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Init::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Init, _impl_._cached_size_),
              false,
          },
          &Init::MergeImpl,
          &Init::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Init::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Init)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.serverid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.voterid_) -
      reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.voterid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Init::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Init::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Init_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Init>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 voterID = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Init, _impl_.voterid_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.voterid_)}},
    // int32 serverID = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Init, _impl_.serverid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.serverid_)}},
    // int32 sessionID = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Init, _impl_.sessionid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.sessionid_)}},
    // int32 leaderID = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Init, _impl_.leaderid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Init, _impl_.leaderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 serverID = 1;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.serverid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sessionID = 2;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.sessionid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderID = 3;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.leaderid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 voterID = 4;
    {PROTOBUF_FIELD_OFFSET(Init, _impl_.voterid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Init::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Init)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 serverID = 1;
  if (this->_internal_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_serverid(), target);
  }

  // int32 sessionID = 2;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 leaderID = 3;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_leaderid(), target);
  }

  // int32 voterID = 4;
  if (this->_internal_voterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_voterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Init)
  return target;
}

::size_t Init::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Init)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 serverID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 sessionID = 2;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 leaderID = 3;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  // int32 voterID = 4;
  if (this->_internal_voterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_voterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Init::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Init*>(&to_msg);
  auto& from = static_cast<const Init&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Init)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_serverid() != 0) {
    _this->_impl_.serverid_ = from._impl_.serverid_;
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  if (from._internal_voterid() != 0) {
    _this->_impl_.voterid_ = from._impl_.voterid_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Init::CopyFrom(const Init& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Init)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Init::IsInitialized() const {
  return true;
}

void Init::InternalSwap(Init* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Init, _impl_.voterid_)
      + sizeof(Init::_impl_.voterid_)
      - PROTOBUF_FIELD_OFFSET(Init, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::google::protobuf::Metadata Init::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[1]);
}
// ===================================================================

class Prepare::_Internal {
 public:
};

Prepare::Prepare(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Prepare)
}
Prepare::Prepare(
    ::google::protobuf::Arena* arena, const Prepare& from)
    : Prepare(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Prepare::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Prepare::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, voterid_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::voterid_));
}
Prepare::~Prepare() {
  // @@protoc_insertion_point(destructor:protos.Prepare)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Prepare::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Prepare::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Prepare, _impl_._cached_size_),
              false,
          },
          &Prepare::MergeImpl,
          &Prepare::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Prepare::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Prepare)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.voterid_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.voterid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Prepare::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> Prepare::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Prepare_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Prepare>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 roundNumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Prepare, _impl_.roundnumber_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Prepare, _impl_.roundnumber_)}},
    // uint64 timeStamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Prepare, _impl_.timestamp_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Prepare, _impl_.timestamp_)}},
    // int32 serverID = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Prepare, _impl_.serverid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Prepare, _impl_.serverid_)}},
    // int32 sessionID = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Prepare, _impl_.sessionid_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Prepare, _impl_.sessionid_)}},
    // int32 leaderID = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Prepare, _impl_.leaderid_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Prepare, _impl_.leaderid_)}},
    // int32 voterID = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Prepare, _impl_.voterid_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Prepare, _impl_.voterid_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 roundNumber = 1;
    {PROTOBUF_FIELD_OFFSET(Prepare, _impl_.roundnumber_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint64 timeStamp = 2;
    {PROTOBUF_FIELD_OFFSET(Prepare, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // int32 serverID = 3;
    {PROTOBUF_FIELD_OFFSET(Prepare, _impl_.serverid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sessionID = 4;
    {PROTOBUF_FIELD_OFFSET(Prepare, _impl_.sessionid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderID = 5;
    {PROTOBUF_FIELD_OFFSET(Prepare, _impl_.leaderid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 voterID = 6;
    {PROTOBUF_FIELD_OFFSET(Prepare, _impl_.voterid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Prepare::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Prepare)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_roundnumber(), target);
  }

  // uint64 timeStamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  // int32 serverID = 3;
  if (this->_internal_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_serverid(), target);
  }

  // int32 sessionID = 4;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 leaderID = 5;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_leaderid(), target);
  }

  // int32 voterID = 6;
  if (this->_internal_voterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_voterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Prepare)
  return target;
}

::size_t Prepare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Prepare)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timeStamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_roundnumber());
  }

  // int32 serverID = 3;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 sessionID = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 leaderID = 5;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  // int32 voterID = 6;
  if (this->_internal_voterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_voterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Prepare::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Prepare*>(&to_msg);
  auto& from = static_cast<const Prepare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Prepare)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_roundnumber() != 0) {
    _this->_impl_.roundnumber_ = from._impl_.roundnumber_;
  }
  if (from._internal_serverid() != 0) {
    _this->_impl_.serverid_ = from._impl_.serverid_;
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  if (from._internal_voterid() != 0) {
    _this->_impl_.voterid_ = from._impl_.voterid_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Prepare::CopyFrom(const Prepare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Prepare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Prepare::IsInitialized() const {
  return true;
}

void Prepare::InternalSwap(Prepare* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prepare, _impl_.voterid_)
      + sizeof(Prepare::_impl_.voterid_)
      - PROTOBUF_FIELD_OFFSET(Prepare, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Prepare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[2]);
}
// ===================================================================

class Promise::_Internal {
 public:
  using HasBits = decltype(std::declval<Promise>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Promise, _impl_._has_bits_);
};

Promise::Promise(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Promise)
}
inline PROTOBUF_NDEBUG_INLINE Promise::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Promise::Promise(
    ::google::protobuf::Arena* arena,
    const Promise& from)
    : ::google::protobuf::Message(arena) {
  Promise* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vote_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(
                              arena, *from._impl_.vote_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roundnumber_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, roundnumber_),
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, roundnumber_) +
               sizeof(Impl_::leaderid_));

  // @@protoc_insertion_point(copy_constructor:protos.Promise)
}
inline PROTOBUF_NDEBUG_INLINE Promise::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Promise::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vote_),
           0,
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, vote_) +
               sizeof(Impl_::leaderid_));
}
Promise::~Promise() {
  // @@protoc_insertion_point(destructor:protos.Promise)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Promise::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vote_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Promise::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Promise, _impl_._cached_size_),
              false,
          },
          &Promise::MergeImpl,
          &Promise::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Promise::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Promise)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  ::memset(&_impl_.roundnumber_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leaderid_) -
      reinterpret_cast<char*>(&_impl_.roundnumber_)) + sizeof(_impl_.leaderid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Promise::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> Promise::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Promise, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967048,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Promise_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Promise>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 leaderID = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Promise, _impl_.leaderid_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.leaderid_)}},
    // int32 roundNumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Promise, _impl_.roundnumber_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.roundnumber_)}},
    // bool ack = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Promise, _impl_.ack_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.ack_)}},
    // int32 lastGoodRound = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Promise, _impl_.lastgoodround_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.lastgoodround_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.VotePax vote = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.vote_)}},
    // int32 serverID = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Promise, _impl_.serverid_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.serverid_)}},
    // int32 sessionID = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Promise, _impl_.sessionid_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Promise, _impl_.sessionid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 roundNumber = 1;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.roundnumber_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool ack = 2;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.ack_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 lastGoodRound = 3;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.lastgoodround_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.VotePax vote = 5;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.vote_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 serverID = 6;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.serverid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sessionID = 7;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.sessionid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderID = 8;
    {PROTOBUF_FIELD_OFFSET(Promise, _impl_.leaderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::VotePax>()},
  }}, {{
  }},
};

::uint8_t* Promise::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Promise)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_roundnumber(), target);
  }

  // bool ack = 2;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_ack(), target);
  }

  // int32 lastGoodRound = 3;
  if (this->_internal_lastgoodround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_lastgoodround(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .protos.VotePax vote = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.vote_, _impl_.vote_->GetCachedSize(), target, stream);
  }

  // int32 serverID = 6;
  if (this->_internal_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_serverid(), target);
  }

  // int32 sessionID = 7;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 leaderID = 8;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Promise)
  return target;
}

::size_t Promise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Promise)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protos.VotePax vote = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vote_);
  }

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_roundnumber());
  }

  // bool ack = 2;
  if (this->_internal_ack() != 0) {
    total_size += 2;
  }

  // int32 lastGoodRound = 3;
  if (this->_internal_lastgoodround() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lastgoodround());
  }

  // int32 serverID = 6;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 sessionID = 7;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 leaderID = 8;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Promise::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Promise*>(&to_msg);
  auto& from = static_cast<const Promise&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Promise)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.vote_ != nullptr);
    if (_this->_impl_.vote_ == nullptr) {
      _this->_impl_.vote_ =
          ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(arena, *from._impl_.vote_);
    } else {
      _this->_impl_.vote_->MergeFrom(*from._impl_.vote_);
    }
  }
  if (from._internal_roundnumber() != 0) {
    _this->_impl_.roundnumber_ = from._impl_.roundnumber_;
  }
  if (from._internal_ack() != 0) {
    _this->_impl_.ack_ = from._impl_.ack_;
  }
  if (from._internal_lastgoodround() != 0) {
    _this->_impl_.lastgoodround_ = from._impl_.lastgoodround_;
  }
  if (from._internal_serverid() != 0) {
    _this->_impl_.serverid_ = from._impl_.serverid_;
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Promise::CopyFrom(const Promise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Promise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Promise::IsInitialized() const {
  return true;
}

void Promise::InternalSwap(Promise* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Promise, _impl_.leaderid_)
      + sizeof(Promise::_impl_.leaderid_)
      - PROTOBUF_FIELD_OFFSET(Promise, _impl_.vote_)>(
          reinterpret_cast<char*>(&_impl_.vote_),
          reinterpret_cast<char*>(&other->_impl_.vote_));
}

::google::protobuf::Metadata Promise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[3]);
}
// ===================================================================

class Accept::_Internal {
 public:
  using HasBits = decltype(std::declval<Accept>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Accept, _impl_._has_bits_);
};

Accept::Accept(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Accept)
}
inline PROTOBUF_NDEBUG_INLINE Accept::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Accept::Accept(
    ::google::protobuf::Arena* arena,
    const Accept& from)
    : ::google::protobuf::Message(arena) {
  Accept* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vote_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(
                              arena, *from._impl_.vote_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roundnumber_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, roundnumber_),
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, roundnumber_) +
               sizeof(Impl_::leaderid_));

  // @@protoc_insertion_point(copy_constructor:protos.Accept)
}
inline PROTOBUF_NDEBUG_INLINE Accept::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Accept::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vote_),
           0,
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, vote_) +
               sizeof(Impl_::leaderid_));
}
Accept::~Accept() {
  // @@protoc_insertion_point(destructor:protos.Accept)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Accept::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vote_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Accept::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Accept, _impl_._cached_size_),
              false,
          },
          &Accept::MergeImpl,
          &Accept::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Accept::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Accept)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  ::memset(&_impl_.roundnumber_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leaderid_) -
      reinterpret_cast<char*>(&_impl_.roundnumber_)) + sizeof(_impl_.leaderid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Accept::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> Accept::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Accept, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Accept_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Accept>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 roundNumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accept, _impl_.roundnumber_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Accept, _impl_.roundnumber_)}},
    // .protos.VotePax vote = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Accept, _impl_.vote_)}},
    // int32 serverID = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accept, _impl_.serverid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Accept, _impl_.serverid_)}},
    // int32 sessionID = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accept, _impl_.sessionid_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Accept, _impl_.sessionid_)}},
    // int32 leaderID = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accept, _impl_.leaderid_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Accept, _impl_.leaderid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 roundNumber = 1;
    {PROTOBUF_FIELD_OFFSET(Accept, _impl_.roundnumber_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.VotePax vote = 2;
    {PROTOBUF_FIELD_OFFSET(Accept, _impl_.vote_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 serverID = 3;
    {PROTOBUF_FIELD_OFFSET(Accept, _impl_.serverid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sessionID = 4;
    {PROTOBUF_FIELD_OFFSET(Accept, _impl_.sessionid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderID = 5;
    {PROTOBUF_FIELD_OFFSET(Accept, _impl_.leaderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::VotePax>()},
  }}, {{
  }},
};

::uint8_t* Accept::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Accept)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_roundnumber(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .protos.VotePax vote = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.vote_, _impl_.vote_->GetCachedSize(), target, stream);
  }

  // int32 serverID = 3;
  if (this->_internal_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_serverid(), target);
  }

  // int32 sessionID = 4;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 leaderID = 5;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Accept)
  return target;
}

::size_t Accept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Accept)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protos.VotePax vote = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vote_);
  }

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_roundnumber());
  }

  // int32 serverID = 3;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 sessionID = 4;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 leaderID = 5;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Accept::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Accept*>(&to_msg);
  auto& from = static_cast<const Accept&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Accept)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.vote_ != nullptr);
    if (_this->_impl_.vote_ == nullptr) {
      _this->_impl_.vote_ =
          ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(arena, *from._impl_.vote_);
    } else {
      _this->_impl_.vote_->MergeFrom(*from._impl_.vote_);
    }
  }
  if (from._internal_roundnumber() != 0) {
    _this->_impl_.roundnumber_ = from._impl_.roundnumber_;
  }
  if (from._internal_serverid() != 0) {
    _this->_impl_.serverid_ = from._impl_.serverid_;
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Accept::CopyFrom(const Accept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Accept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Accept::IsInitialized() const {
  return true;
}

void Accept::InternalSwap(Accept* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accept, _impl_.leaderid_)
      + sizeof(Accept::_impl_.leaderid_)
      - PROTOBUF_FIELD_OFFSET(Accept, _impl_.vote_)>(
          reinterpret_cast<char*>(&_impl_.vote_),
          reinterpret_cast<char*>(&other->_impl_.vote_));
}

::google::protobuf::Metadata Accept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[4]);
}
// ===================================================================

class Accepted::_Internal {
 public:
  using HasBits = decltype(std::declval<Accepted>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Accepted, _impl_._has_bits_);
};

Accepted::Accepted(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Accepted)
}
inline PROTOBUF_NDEBUG_INLINE Accepted::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Accepted::Accepted(
    ::google::protobuf::Arena* arena,
    const Accepted& from)
    : ::google::protobuf::Message(arena) {
  Accepted* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vote_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(
                              arena, *from._impl_.vote_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, roundnumber_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, roundnumber_),
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, roundnumber_) +
               sizeof(Impl_::leaderid_));

  // @@protoc_insertion_point(copy_constructor:protos.Accepted)
}
inline PROTOBUF_NDEBUG_INLINE Accepted::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Accepted::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vote_),
           0,
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, vote_) +
               sizeof(Impl_::leaderid_));
}
Accepted::~Accepted() {
  // @@protoc_insertion_point(destructor:protos.Accepted)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Accepted::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vote_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Accepted::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Accepted, _impl_._cached_size_),
              false,
          },
          &Accepted::MergeImpl,
          &Accepted::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Accepted::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Accepted)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  ::memset(&_impl_.roundnumber_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leaderid_) -
      reinterpret_cast<char*>(&_impl_.roundnumber_)) + sizeof(_impl_.leaderid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Accepted::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> Accepted::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Accepted, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967172,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Accepted_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Accepted>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 roundNumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accepted, _impl_.roundnumber_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Accepted, _impl_.roundnumber_)}},
    // bool ack = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Accepted, _impl_.ack_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Accepted, _impl_.ack_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .protos.VotePax vote = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(Accepted, _impl_.vote_)}},
    // int32 serverID = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accepted, _impl_.serverid_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Accepted, _impl_.serverid_)}},
    // int32 sessionID = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accepted, _impl_.sessionid_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Accepted, _impl_.sessionid_)}},
    // int32 leaderID = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Accepted, _impl_.leaderid_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Accepted, _impl_.leaderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 roundNumber = 1;
    {PROTOBUF_FIELD_OFFSET(Accepted, _impl_.roundnumber_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool ack = 2;
    {PROTOBUF_FIELD_OFFSET(Accepted, _impl_.ack_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .protos.VotePax vote = 4;
    {PROTOBUF_FIELD_OFFSET(Accepted, _impl_.vote_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 serverID = 5;
    {PROTOBUF_FIELD_OFFSET(Accepted, _impl_.serverid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 sessionID = 6;
    {PROTOBUF_FIELD_OFFSET(Accepted, _impl_.sessionid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 leaderID = 7;
    {PROTOBUF_FIELD_OFFSET(Accepted, _impl_.leaderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::VotePax>()},
  }}, {{
  }},
};

::uint8_t* Accepted::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Accepted)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_roundnumber(), target);
  }

  // bool ack = 2;
  if (this->_internal_ack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_ack(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .protos.VotePax vote = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.vote_, _impl_.vote_->GetCachedSize(), target, stream);
  }

  // int32 serverID = 5;
  if (this->_internal_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_serverid(), target);
  }

  // int32 sessionID = 6;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Accepted)
  return target;
}

::size_t Accepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Accepted)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protos.VotePax vote = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vote_);
  }

  // int32 roundNumber = 1;
  if (this->_internal_roundnumber() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_roundnumber());
  }

  // bool ack = 2;
  if (this->_internal_ack() != 0) {
    total_size += 2;
  }

  // int32 serverID = 5;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 sessionID = 6;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Accepted::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Accepted*>(&to_msg);
  auto& from = static_cast<const Accepted&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Accepted)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.vote_ != nullptr);
    if (_this->_impl_.vote_ == nullptr) {
      _this->_impl_.vote_ =
          ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(arena, *from._impl_.vote_);
    } else {
      _this->_impl_.vote_->MergeFrom(*from._impl_.vote_);
    }
  }
  if (from._internal_roundnumber() != 0) {
    _this->_impl_.roundnumber_ = from._impl_.roundnumber_;
  }
  if (from._internal_ack() != 0) {
    _this->_impl_.ack_ = from._impl_.ack_;
  }
  if (from._internal_serverid() != 0) {
    _this->_impl_.serverid_ = from._impl_.serverid_;
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Accepted::CopyFrom(const Accepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Accepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Accepted::IsInitialized() const {
  return true;
}

void Accepted::InternalSwap(Accepted* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Accepted, _impl_.leaderid_)
      + sizeof(Accepted::_impl_.leaderid_)
      - PROTOBUF_FIELD_OFFSET(Accepted, _impl_.vote_)>(
          reinterpret_cast<char*>(&_impl_.vote_),
          reinterpret_cast<char*>(&other->_impl_.vote_));
}

::google::protobuf::Metadata Accepted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[5]);
}
// ===================================================================

class Session::_Internal {
 public:
  using HasBits = decltype(std::declval<Session>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Session, _impl_._has_bits_);
};

Session::Session(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Session)
}
inline PROTOBUF_NDEBUG_INLINE Session::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Session::Session(
    ::google::protobuf::Arena* arena,
    const Session& from)
    : ::google::protobuf::Message(arena) {
  Session* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vote_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(
                              arena, *from._impl_.vote_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sessionid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sessionid_),
           offsetof(Impl_, voterid_) -
               offsetof(Impl_, sessionid_) +
               sizeof(Impl_::voterid_));

  // @@protoc_insertion_point(copy_constructor:protos.Session)
}
inline PROTOBUF_NDEBUG_INLINE Session::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Session::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vote_),
           0,
           offsetof(Impl_, voterid_) -
               offsetof(Impl_, vote_) +
               sizeof(Impl_::voterid_));
}
Session::~Session() {
  // @@protoc_insertion_point(destructor:protos.Session)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Session::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vote_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Session::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Session, _impl_._cached_size_),
              false,
          },
          &Session::MergeImpl,
          &Session::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Session)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  ::memset(&_impl_.sessionid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.voterid_) -
      reinterpret_cast<char*>(&_impl_.sessionid_)) + sizeof(_impl_.voterid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Session::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 0, 2> Session::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Session, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Session_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Session>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 voterID = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Session, _impl_.voterid_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.voterid_)}},
    // int32 sessionID = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Session, _impl_.sessionid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.sessionid_)}},
    // int32 serverID = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Session, _impl_.serverid_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.serverid_)}},
    // int32 lastRound = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Session, _impl_.lastround_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.lastround_)}},
    // int32 lastGoodRound = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Session, _impl_.lastgoodround_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.lastgoodround_)}},
    // .protos.VotePax vote = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.vote_)}},
    // bool isDecided = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Session, _impl_.isdecided_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.isdecided_)}},
    // int32 leaderID = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Session, _impl_.leaderid_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Session, _impl_.leaderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 sessionID = 1;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.sessionid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 serverID = 2;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.serverid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lastRound = 3;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.lastround_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 lastGoodRound = 4;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.lastgoodround_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.VotePax vote = 5;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.vote_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool isDecided = 6;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.isdecided_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 leaderID = 7;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.leaderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 voterID = 8;
    {PROTOBUF_FIELD_OFFSET(Session, _impl_.voterid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::VotePax>()},
  }}, {{
  }},
};

::uint8_t* Session::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Session)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 sessionID = 1;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_sessionid(), target);
  }

  // int32 serverID = 2;
  if (this->_internal_serverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_serverid(), target);
  }

  // int32 lastRound = 3;
  if (this->_internal_lastround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_lastround(), target);
  }

  // int32 lastGoodRound = 4;
  if (this->_internal_lastgoodround() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_lastgoodround(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .protos.VotePax vote = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.vote_, _impl_.vote_->GetCachedSize(), target, stream);
  }

  // bool isDecided = 6;
  if (this->_internal_isdecided() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_isdecided(), target);
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_leaderid(), target);
  }

  // int32 voterID = 8;
  if (this->_internal_voterid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_voterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Session)
  return target;
}

::size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Session)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protos.VotePax vote = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vote_);
  }

  // int32 sessionID = 1;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 serverID = 2;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_serverid());
  }

  // int32 lastRound = 3;
  if (this->_internal_lastround() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lastround());
  }

  // int32 lastGoodRound = 4;
  if (this->_internal_lastgoodround() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_lastgoodround());
  }

  // bool isDecided = 6;
  if (this->_internal_isdecided() != 0) {
    total_size += 2;
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  // int32 voterID = 8;
  if (this->_internal_voterid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_voterid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Session::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Session*>(&to_msg);
  auto& from = static_cast<const Session&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Session)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.vote_ != nullptr);
    if (_this->_impl_.vote_ == nullptr) {
      _this->_impl_.vote_ =
          ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(arena, *from._impl_.vote_);
    } else {
      _this->_impl_.vote_->MergeFrom(*from._impl_.vote_);
    }
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_serverid() != 0) {
    _this->_impl_.serverid_ = from._impl_.serverid_;
  }
  if (from._internal_lastround() != 0) {
    _this->_impl_.lastround_ = from._impl_.lastround_;
  }
  if (from._internal_lastgoodround() != 0) {
    _this->_impl_.lastgoodround_ = from._impl_.lastgoodround_;
  }
  if (from._internal_isdecided() != 0) {
    _this->_impl_.isdecided_ = from._impl_.isdecided_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  if (from._internal_voterid() != 0) {
    _this->_impl_.voterid_ = from._impl_.voterid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, _impl_.voterid_)
      + sizeof(Session::_impl_.voterid_)
      - PROTOBUF_FIELD_OFFSET(Session, _impl_.vote_)>(
          reinterpret_cast<char*>(&_impl_.vote_),
          reinterpret_cast<char*>(&other->_impl_.vote_));
}

::google::protobuf::Metadata Session::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[6]);
}
// ===================================================================

class Commit::_Internal {
 public:
  using HasBits = decltype(std::declval<Commit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Commit, _impl_._has_bits_);
};

Commit::Commit(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:protos.Commit)
}
inline PROTOBUF_NDEBUG_INLINE Commit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Commit::Commit(
    ::google::protobuf::Arena* arena,
    const Commit& from)
    : ::google::protobuf::Message(arena) {
  Commit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.vote_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(
                              arena, *from._impl_.vote_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sessionid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sessionid_),
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, sessionid_) +
               sizeof(Impl_::leaderid_));

  // @@protoc_insertion_point(copy_constructor:protos.Commit)
}
inline PROTOBUF_NDEBUG_INLINE Commit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Commit::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, vote_),
           0,
           offsetof(Impl_, leaderid_) -
               offsetof(Impl_, vote_) +
               sizeof(Impl_::leaderid_));
}
Commit::~Commit() {
  // @@protoc_insertion_point(destructor:protos.Commit)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Commit::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.vote_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Commit::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Commit, _impl_._cached_size_),
              false,
          },
          &Commit::MergeImpl,
          &Commit::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.Commit)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  ::memset(&_impl_.sessionid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.leaderid_) -
      reinterpret_cast<char*>(&_impl_.sessionid_)) + sizeof(_impl_.leaderid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Commit::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> Commit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Commit, _impl_._has_bits_),
    0, // no _extensions_
    7, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967214,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Commit_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::protos::Commit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 sessionID = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Commit, _impl_.sessionid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Commit, _impl_.sessionid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 leaderID = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Commit, _impl_.leaderid_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Commit, _impl_.leaderid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 sessionID = 1;
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.sessionid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .protos.VotePax vote = 5;
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.vote_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 leaderID = 7;
    {PROTOBUF_FIELD_OFFSET(Commit, _impl_.leaderid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::protos::VotePax>()},
  }}, {{
  }},
};

::uint8_t* Commit::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.Commit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 sessionID = 1;
  if (this->_internal_sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_sessionid(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .protos.VotePax vote = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.vote_, _impl_.vote_->GetCachedSize(), target, stream);
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_leaderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.Commit)
  return target;
}

::size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.Commit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protos.VotePax vote = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.vote_);
  }

  // int32 sessionID = 1;
  if (this->_internal_sessionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sessionid());
  }

  // int32 leaderID = 7;
  if (this->_internal_leaderid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leaderid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Commit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Commit*>(&to_msg);
  auto& from = static_cast<const Commit&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.Commit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.vote_ != nullptr);
    if (_this->_impl_.vote_ == nullptr) {
      _this->_impl_.vote_ =
          ::google::protobuf::Message::CopyConstruct<::protos::VotePax>(arena, *from._impl_.vote_);
    } else {
      _this->_impl_.vote_->MergeFrom(*from._impl_.vote_);
    }
  }
  if (from._internal_sessionid() != 0) {
    _this->_impl_.sessionid_ = from._impl_.sessionid_;
  }
  if (from._internal_leaderid() != 0) {
    _this->_impl_.leaderid_ = from._impl_.leaderid_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Commit::IsInitialized() const {
  return true;
}

void Commit::InternalSwap(Commit* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commit, _impl_.leaderid_)
      + sizeof(Commit::_impl_.leaderid_)
      - PROTOBUF_FIELD_OFFSET(Commit, _impl_.vote_)>(
          reinterpret_cast<char*>(&_impl_.vote_),
          reinterpret_cast<char*>(&other->_impl_.vote_));
}

::google::protobuf::Metadata Commit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[7]);
}
// ===================================================================

class Finish::_Internal {
 public:
};

Finish::Finish(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:protos.Finish)
}
Finish::Finish(
    ::google::protobuf::Arena* arena,
    const Finish& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  Finish* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:protos.Finish)
}









::google::protobuf::Metadata Finish::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_Paxos_2eproto_getter,
                                   &descriptor_table_Paxos_2eproto_once,
                                   file_level_metadata_Paxos_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_Paxos_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
